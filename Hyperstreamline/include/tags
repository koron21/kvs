!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BaseClass	CellLocatorBIH.h	/^    typedef CellLocator BaseClass;$/;"	t	class:kvs::CellLocatorBIH	access:public
BoundingBox	BoundingBox.h	/^        BoundingBox();$/;"	p	class:kvs::BoundingBox	access:public	signature:()
BoundingBox	BoundingBox.h	/^        BoundingBox(const kvs::UnstructuredVolumeObject* object, size_t cindex);		\/\/\/<	create a bounding box based on a specific object and cell index $/;"	p	class:kvs::BoundingBox	access:public	signature:(const kvs::UnstructuredVolumeObject* object, size_t cindex)
BoundingBox	BoundingBox.h	/^    class BoundingBox$/;"	c	namespace:kvs
CACHEFULL	CellLocator.h	/^        CACHEFULL = 2$/;"	e	enum:kvs::CellLocator::Mode
CACHEHALF	CellLocator.h	/^        CACHEHALF  = 1,$/;"	e	enum:kvs::CellLocator::Mode
CACHEOFF	CellLocator.h	/^        CACHEOFF = 0,$/;"	e	enum:kvs::CellLocator::Mode
CellLocator	CellLocator.cpp	/^CellLocator::CellLocator( const kvs::UnstructuredVolumeObject* volume ):$/;"	f	class:kvs::CellLocator	signature:( const kvs::UnstructuredVolumeObject* volume )
CellLocator	CellLocator.cpp	/^CellLocator::CellLocator()$/;"	f	class:kvs::CellLocator	signature:()
CellLocator	CellLocator.h	/^    CellLocator( const kvs::UnstructuredVolumeObject* volume );$/;"	p	class:kvs::CellLocator	access:public	signature:( const kvs::UnstructuredVolumeObject* volume )
CellLocator	CellLocator.h	/^    CellLocator();$/;"	p	class:kvs::CellLocator	access:public	signature:()
CellLocator	CellLocator.h	/^class CellLocator$/;"	c	namespace:kvs
CellLocatorBIH	CellLocatorBIH.cpp	/^CellLocatorBIH::CellLocatorBIH( const kvs::UnstructuredVolumeObject* volume ):$/;"	f	class:kvs::CellLocatorBIH	signature:( const kvs::UnstructuredVolumeObject* volume )
CellLocatorBIH	CellLocatorBIH.cpp	/^CellLocatorBIH::CellLocatorBIH()$/;"	f	class:kvs::CellLocatorBIH	signature:()
CellLocatorBIH	CellLocatorBIH.h	/^    CellLocatorBIH( const kvs::UnstructuredVolumeObject* volume );$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( const kvs::UnstructuredVolumeObject* volume )
CellLocatorBIH	CellLocatorBIH.h	/^    CellLocatorBIH();$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:()
CellLocatorBIH	CellLocatorBIH.h	/^class CellLocatorBIH : public CellLocator$/;"	c	namespace:kvs	inherits:CellLocator
CellTree	CellTree.h	/^	CellTree(){}$/;"	f	class:kvs::CellTree	access:public	signature:()
CellTree	CellTree.h	/^class CellTree$/;"	c	namespace:kvs
CellTreeBuilder	CellTree.cpp	/^CellTreeBuilder::CellTreeBuilder()$/;"	f	class:kvs::CellTreeBuilder	signature:()
CellTreeBuilder	CellTree.h	/^	CellTreeBuilder();$/;"	p	class:kvs::CellTreeBuilder	access:public	signature:()
CellTreeBuilder	CellTree.h	/^class CellTreeBuilder$/;"	c	namespace:kvs
ColorType	StochasticLineRenderer.h	/^    typedef GLubyte  ColorType;$/;"	t	class:kvs::glew::StochasticLineRenderer	access:protected
ColorType	StochasticPointRenderer.h	/^    typedef GLubyte  ColorType;$/;"	t	class:kvs::glew::StochasticPointRenderer	access:protected
ColorType	StochasticPolygonRenderer.h	/^    typedef GLubyte  ColorType;$/;"	t	class:kvs::glew::StochasticPolygonRenderer	access:protected
ConnectType	StochasticLineRenderer.h	/^    typedef GLuint   ConnectType;$/;"	t	class:kvs::glew::StochasticLineRenderer	access:protected
ConnectType	StochasticPolygonRenderer.h	/^    typedef GLuint   ConnectType;$/;"	t	class:kvs::glew::StochasticPolygonRenderer	access:protected
ConnectType	StochasticVolumeRenderer.h	/^    typedef GLuint   ConnectType;$/;"	t	class:kvs::glew::StochasticVolumeRenderer	access:protected
CoordType	StochasticLineRenderer.h	/^    typedef GLfloat  CoordType;$/;"	t	class:kvs::glew::StochasticLineRenderer	access:protected
CoordType	StochasticPointRenderer.h	/^    typedef GLfloat  CoordType;$/;"	t	class:kvs::glew::StochasticPointRenderer	access:protected
CoordType	StochasticPolygonRenderer.h	/^    typedef GLfloat  CoordType;$/;"	t	class:kvs::glew::StochasticPolygonRenderer	access:protected
CoordType	StochasticVolumeRenderer.h	/^    typedef GLfloat  CoordType;$/;"	t	class:kvs::glew::StochasticVolumeRenderer	access:protected
DownCast	NullObject.h	/^    static const kvs::NullObject* DownCast( const kvs::ObjectBase* object );$/;"	p	class:kvs::NullObject	access:public	signature:( const kvs::ObjectBase* object )
DownCast	NullObject.h	/^    static kvs::NullObject* DownCast( kvs::ObjectBase* object );$/;"	p	class:kvs::NullObject	access:public	signature:( kvs::ObjectBase* object )
IndexType	StochasticLineRenderer.h	/^    typedef GLushort IndexType;$/;"	t	class:kvs::glew::StochasticLineRenderer	access:protected
IndexType	StochasticPointRenderer.h	/^    typedef GLushort IndexType;$/;"	t	class:kvs::glew::StochasticPointRenderer	access:protected
IndexType	StochasticPolygonRenderer.h	/^    typedef GLushort IndexType;$/;"	t	class:kvs::glew::StochasticPolygonRenderer	access:protected
IndexType	StochasticVolumeRenderer.h	/^    typedef GLushort IndexType;$/;"	t	class:kvs::glew::StochasticVolumeRenderer	access:protected
KVS__BOUNDING_BOX_H_INCLUDE	BoundingBox.h	2;"	d
KVS__CELL_LOCATOR_BIH_H_INCLUDE	CellLocatorBIH.h	2;"	d
KVS__CELL_LOCATOR_H_INCLUDE	CellLocator.h	2;"	d
KVS__CELL_TREE_H_INCLUDE	CellTree.h	2;"	d
KVS__GLEW__PRE_INTEGRATION_TABLE_H_INCLUDE	PreIntegrationTable.h	22;"	d
KVS__GLEW__STOCHASTIC_LINE_RENDERER_H_INCLUDE	StochasticLineRenderer.h	10;"	d
KVS__GLEW__STOCHASTIC_POINT_RENDERER_H_INCLUDE	StochasticPointRenderer.h	10;"	d
KVS__GLEW__STOCHASTIC_POLYGON_RENDERER_H_INCLUDE	StochasticPolygonRenderer.h	10;"	d
KVS__GLEW__STOCHASTIC_RENDERER_BASE_H_INCLUDE	StochasticRendererBase.h	10;"	d
KVS__GLEW__STOCHASTIC_RENDERER_H_INCLUDE	StochasticRenderer.h	10;"	d
KVS__GLEW__STOCHASTIC_VOLUME_RENDERER_H_INCLUDE	StochasticVolumeRenderer.h	10;"	d
KVS__NULL_OBJECT_H_INCLUDE	NullObject.h	10;"	d
KVS__POLYGON_TO_POLYGON_H_INCLUDE	PolygonToPolygon.h	16;"	d
KVS__SPT_DECOMPOSITION_TABLE_H_INCLUDE	SPTDecompositionTable.h	10;"	d
Line	StochasticRendererBase.h	/^        Line,$/;"	e	enum:kvs::glew::StochasticRendererBase::RendererType
Mode	CellLocator.h	/^    enum Mode$/;"	g	class:kvs::CellLocator	access:public
NormalType	StochasticPointRenderer.h	/^    typedef GLbyte   NormalType;$/;"	t	class:kvs::glew::StochasticPointRenderer	access:protected
NormalType	StochasticPolygonRenderer.h	/^    typedef GLbyte   NormalType;$/;"	t	class:kvs::glew::StochasticPolygonRenderer	access:protected
NormalType	StochasticVolumeRenderer.h	/^    typedef GLbyte   NormalType;$/;"	t	class:kvs::glew::StochasticVolumeRenderer	access:protected
NullObject	NullObject.h	/^    NullObject( const kvs::ObjectBase* object );$/;"	p	class:kvs::NullObject	access:public	signature:( const kvs::ObjectBase* object )
NullObject	NullObject.h	/^    NullObject( const kvs::Vector3f& min_coord, const kvs::Vector3f& max_coord );$/;"	p	class:kvs::NullObject	access:public	signature:( const kvs::Vector3f& min_coord, const kvs::Vector3f& max_coord )
NullObject	NullObject.h	/^    NullObject( void );$/;"	p	class:kvs::NullObject	access:public	signature:( void )
NullObject	NullObject.h	/^class NullObject : public kvs::ObjectBase$/;"	c	namespace:kvs	inherits:kvs::ObjectBase
Particles	StochasticPointRenderer.h	/^    Particles( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
Particles	StochasticPointRenderer.h	/^class StochasticPointRenderer::Particles$/;"	c	class:kvs::glew::StochasticPointRenderer
Point	StochasticRendererBase.h	/^        Point = 0,$/;"	e	enum:kvs::glew::StochasticRendererBase::RendererType
Polygon	StochasticRendererBase.h	/^        Polygon,$/;"	e	enum:kvs::glew::StochasticRendererBase::RendererType
PolygonToPolygon	PolygonToPolygon.h	/^    PolygonToPolygon( const kvs::PolygonObject* object );$/;"	p	class:kvs::PolygonToPolygon	access:public	signature:( const kvs::PolygonObject* object )
PolygonToPolygon	PolygonToPolygon.h	/^    PolygonToPolygon( void );$/;"	p	class:kvs::PolygonToPolygon	access:public	signature:( void )
PolygonToPolygon	PolygonToPolygon.h	/^class PolygonToPolygon : public kvs::FilterBase, public kvs::PolygonObject$/;"	c	namespace:kvs	inherits:kvs::FilterBase,kvs::PolygonObject
PreIntegrationTable	PreIntegrationTable.h	/^    PreIntegrationTable( const int size_scalar, const int size_depth );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( const int size_scalar, const int size_depth )
PreIntegrationTable	PreIntegrationTable.h	/^    PreIntegrationTable( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
PreIntegrationTable	PreIntegrationTable.h	/^class PreIntegrationTable$/;"	c	namespace:kvs::glew
Renderer	StochasticPointRenderer.h	/^    Renderer( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Renderer	access:public	signature:( void )
Renderer	StochasticPointRenderer.h	/^class StochasticPointRenderer::Renderer$/;"	c	class:kvs::glew::StochasticPointRenderer
Renderer	StochasticVolumeRenderer.h	/^    Renderer( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:public	signature:( void )
Renderer	StochasticVolumeRenderer.h	/^class StochasticVolumeRenderer::Renderer$/;"	c	class:kvs::glew::StochasticVolumeRenderer
RendererList	StochasticRenderer.h	/^    typedef std::vector<kvs::glew::StochasticRendererBase*> RendererList;$/;"	t	class:kvs::glew::StochasticRenderer	access:public
RendererType	StochasticRendererBase.h	/^    enum RendererType$/;"	g	class:kvs::glew::StochasticRendererBase	access:public
SPTDecompositionTable	SPTDecompositionTable.h	/^namespace SPTDecompositionTable$/;"	n	namespace:kvs
SplitThread	CellTree.h	/^	SplitThread(){}$/;"	f	class:kvs::SplitThread	access:public	signature:()
SplitThread	CellTree.h	/^class SplitThread : public kvs::Thread$/;"	c	namespace:kvs	inherits:kvs::Thread
StochasticLineRenderer	StochasticLineRenderer.h	/^    StochasticLineRenderer( kvs::LineObject* line );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( kvs::LineObject* line )
StochasticLineRenderer	StochasticLineRenderer.h	/^    StochasticLineRenderer( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
StochasticLineRenderer	StochasticLineRenderer.h	/^class StochasticLineRenderer : public kvs::glew::StochasticRendererBase$/;"	c	namespace:kvs::glew	inherits:kvs::glew::StochasticRendererBase
StochasticPointRenderer	StochasticPointRenderer.h	/^    StochasticPointRenderer( kvs::PointObject* point, const size_t repeat_level = 1 );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( kvs::PointObject* point, const size_t repeat_level = 1 )
StochasticPointRenderer	StochasticPointRenderer.h	/^    StochasticPointRenderer( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
StochasticPointRenderer	StochasticPointRenderer.h	/^class StochasticPointRenderer : public kvs::glew::StochasticRendererBase$/;"	c	namespace:kvs::glew	inherits:kvs::glew::StochasticRendererBase
StochasticPolygonRenderer	StochasticPolygonRenderer.h	/^    StochasticPolygonRenderer( kvs::PolygonObject* polygon );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( kvs::PolygonObject* polygon )
StochasticPolygonRenderer	StochasticPolygonRenderer.h	/^    StochasticPolygonRenderer( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
StochasticPolygonRenderer	StochasticPolygonRenderer.h	/^class StochasticPolygonRenderer : public kvs::glew::StochasticRendererBase$/;"	c	namespace:kvs::glew	inherits:kvs::glew::StochasticRendererBase
StochasticRenderer	StochasticRenderer.h	/^    StochasticRenderer( const size_t repeat_level = 1 );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( const size_t repeat_level = 1 )
StochasticRenderer	StochasticRenderer.h	/^    StochasticRenderer( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( void )
StochasticRenderer	StochasticRenderer.h	/^class StochasticRenderer : public kvs::RendererBase$/;"	c	namespace:kvs::glew	inherits:kvs::RendererBase
StochasticRendererBase	StochasticRendererBase.h	/^    StochasticRendererBase( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
StochasticRendererBase	StochasticRendererBase.h	/^class StochasticRendererBase : public kvs::RendererBase$/;"	c	namespace:kvs::glew	inherits:kvs::RendererBase
StochasticVolumeRenderer	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer( kvs::UnstructuredVolumeObject* volume, const size_t nsteps = 1 );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( kvs::UnstructuredVolumeObject* volume, const size_t nsteps = 1 )
StochasticVolumeRenderer	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
StochasticVolumeRenderer	StochasticVolumeRenderer.h	/^class StochasticVolumeRenderer : public kvs::glew::StochasticRendererBase$/;"	c	namespace:kvs::glew	inherits:kvs::glew::StochasticRendererBase
Unknown	StochasticRendererBase.h	/^        Unknown$/;"	e	enum:kvs::glew::StochasticRendererBase::RendererType
ValueType	StochasticVolumeRenderer.h	/^    typedef GLfloat  ValueType;$/;"	t	class:kvs::glew::StochasticVolumeRenderer	access:protected
Volume	StochasticRendererBase.h	/^        Volume,$/;"	e	enum:kvs::glew::StochasticRendererBase::RendererType
Volume	StochasticVolumeRenderer.h	/^    Volume( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
Volume	StochasticVolumeRenderer.h	/^class StochasticVolumeRenderer::Volume$/;"	c	class:kvs::glew::StochasticVolumeRenderer
WIN_HOME	main.cpp	6;"	d	file:
__anon1::bucket	CellTree.h	/^	struct bucket \/\/ only stores current max\/min and time of add()$/;"	s	namespace:__anon1
__anon1::bucket::add	CellTree.h	/^        void add( const float _min, const float _max )$/;"	f	struct:__anon1::bucket	access:public	signature:( const float _min, const float _max )
__anon1::bucket::bucket	CellTree.h	/^        bucket()$/;"	f	struct:__anon1::bucket	access:public	signature:()
__anon1::bucket::cnt	CellTree.h	/^        unsigned int cnt;	\/\/counter of add()$/;"	m	struct:__anon1::bucket	access:public
__anon1::bucket::max	CellTree.h	/^        float        max;$/;"	m	struct:__anon1::bucket	access:public
__anon1::bucket::min	CellTree.h	/^        float        min;$/;"	m	struct:__anon1::bucket	access:public
__anon1::center_order	CellTree.h	/^    struct center_order$/;"	s	namespace:__anon1
__anon1::center_order::center_order	CellTree.h	/^        center_order( unsigned int _d ) : $/;"	f	struct:__anon1::center_order	access:public	signature:( unsigned int _d )
__anon1::center_order::d	CellTree.h	/^        unsigned int d;$/;"	m	struct:__anon1::center_order	access:public
__anon1::center_order::operator ()	CellTree.h	/^        bool operator()( const per_cell& pc0, const per_cell& pc1 )$/;"	f	struct:__anon1::center_order	access:public	signature:( const per_cell& pc0, const per_cell& pc1 )
__anon1::find_max_d	CellTree.h	/^    void find_max_d( const per_cell* begin, const per_cell* end, unsigned int d, float& max );$/;"	p	namespace:__anon1	signature:( const per_cell* begin, const per_cell* end, unsigned int d, float& max )
__anon1::find_min_d	CellTree.h	/^    void find_min_d( const per_cell* begin, const per_cell* end, unsigned int d, float& min );$/;"	p	namespace:__anon1	signature:( const per_cell* begin, const per_cell* end, unsigned int d, float& min )
__anon1::find_min_max	CellTree.h	/^	void find_min_max( const per_cell* begin, const per_cell* end, float* min, float* max );$/;"	p	namespace:__anon1	signature:( const per_cell* begin, const per_cell* end, float* min, float* max )
__anon1::left_predicate	CellTree.h	/^    struct left_predicate$/;"	s	namespace:__anon1
__anon1::left_predicate::d	CellTree.h	/^        unsigned int       d;$/;"	m	struct:__anon1::left_predicate	access:public
__anon1::left_predicate::left_predicate	CellTree.h	/^        left_predicate( unsigned int _d, float _p ) : $/;"	f	struct:__anon1::left_predicate	access:public	signature:( unsigned int _d, float _p )
__anon1::left_predicate::operator ()	CellTree.h	/^        bool operator()( const per_cell& pc )$/;"	f	struct:__anon1::left_predicate	access:public	signature:( const per_cell& pc )
__anon1::left_predicate::p	CellTree.h	/^        float              p;$/;"	m	struct:__anon1::left_predicate	access:public
__anon1::per_cell	CellTree.h	/^    struct per_cell $/;"	s	namespace:__anon1
__anon1::per_cell::ind	CellTree.h	/^        unsigned int ind;$/;"	m	struct:__anon1::per_cell	access:public
__anon1::per_cell::max	CellTree.h	/^        float        max[3];$/;"	m	struct:__anon1::per_cell	access:public
__anon1::per_cell::min	CellTree.h	/^        float        min[3];$/;"	m	struct:__anon1::per_cell	access:public
__anon5::find_max_d	CellTree.cpp	/^void find_max_d( const per_cell* begin, const per_cell* end, unsigned int d, float& max )$/;"	f	namespace:__anon5	signature:( const per_cell* begin, const per_cell* end, unsigned int d, float& max )
__anon5::find_min_d	CellTree.cpp	/^void find_min_d( const per_cell* begin, const per_cell* end, unsigned int d, float& min )$/;"	f	namespace:__anon5	signature:( const per_cell* begin, const per_cell* end, unsigned int d, float& min )
__anon5::find_min_max	CellTree.cpp	/^void find_min_max( const per_cell* begin, const per_cell* end, float* min, float* max )$/;"	f	namespace:__anon5	signature:( const per_cell* begin, const per_cell* end, float* min, float* max )
add	CellTree.h	/^        void add( const float _min, const float _max )$/;"	f	struct:__anon1::bucket	access:public	signature:( const float _min, const float _max )
allocate	CellTree.cpp	/^        mask.allocate( node_size );$/;"	p	file:	signature:( node_size )
attachLineObject	StochasticLineRenderer.h	/^    void attachLineObject( kvs::LineObject* line );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( kvs::LineObject* line )
attachObject	StochasticLineRenderer.h	/^    void attachObject( kvs::ObjectBase* object );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( kvs::ObjectBase* object )
attachObject	StochasticPointRenderer.h	/^    void attachObject( kvs::ObjectBase* object );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( kvs::ObjectBase* object )
attachObject	StochasticPolygonRenderer.h	/^    void attachObject( kvs::ObjectBase* object );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( kvs::ObjectBase* object )
attachObject	StochasticRendererBase.h	/^    virtual void attachObject( kvs::ObjectBase* object ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( kvs::ObjectBase* object )
attachObject	StochasticVolumeRenderer.h	/^    void attachObject( kvs::ObjectBase* object );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( kvs::ObjectBase* object )
attachPointObject	StochasticPointRenderer.h	/^    void attachPointObject( kvs::PointObject* point );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( kvs::PointObject* point )
attachPolygonObject	StochasticPolygonRenderer.h	/^    void attachPolygonObject( kvs::PolygonObject* polygon );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( kvs::PolygonObject* polygon )
attachVolumeObject	StochasticVolumeRenderer.h	/^    void attachVolumeObject( kvs::UnstructuredVolumeObject* volume );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( kvs::UnstructuredVolumeObject* volume )
b	CellTree.cpp	/^        bucket b[3][nbuckets];     \/\/3 dimensions, 6 buckets each$/;"	l
b	CellTree.cpp	/^    bucket b[3][nbuckets]; \/\/3 dimensions, 6 buckets each$/;"	l
bd	CellLocator.cpp	/^    kvs::BoundingBox bd(m_dataset, cellid);$/;"	p	file:	signature:(m_dataset, cellid)
bd	CellTree.cpp	/^        kvs::BoundingBox bd( ds, i );$/;"	p	file:	signature:( ds, i )
begin	CellLocatorBIH.cpp	/^            const unsigned int* begin = &(this->m_celltree->leaves[n->start()]);$/;"	l
begin	CellTree.cpp	/^        per_cell* begin = m_pc + start;$/;"	l
bind	PreIntegrationTable.h	/^    void bind( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
bindCell	CellLocator.cpp	/^    m_cell->bindCell( cellid );$/;"	p	file:	signature:( cellid )
bounds	BoundingBox.h	/^        const float* bounds() const;$/;"	p	class:kvs::BoundingBox	access:public	signature:() const
bounds	CellLocator.cpp	/^    const float* bounds = bd.bounds();$/;"	l
bounds	CellTree.cpp	/^        const float* bounds = bd.bounds();$/;"	l
bucket	CellTree.h	/^	struct bucket \/\/ only stores current max\/min and time of add()$/;"	s	namespace:__anon1
bucket	CellTree.h	/^        bucket()$/;"	f	struct:__anon1::bucket	access:public	signature:()
build	CellLocator.h	/^    virtual void build() = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:()
build	CellLocatorBIH.cpp	/^void CellLocatorBIH::build()$/;"	f	class:kvs::CellLocatorBIH	signature:()
build	CellLocatorBIH.h	/^    void build();$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:()
build	CellTree.cpp	/^void CellTreeBuilder::build( CellTree& ct, const kvs::UnstructuredVolumeObject* ds )$/;"	f	class:kvs::CellTreeBuilder	signature:( CellTree& ct, const kvs::UnstructuredVolumeObject* ds )
build	CellTree.h	/^	void build( CellTree& ct, const kvs::UnstructuredVolumeObject* ds );$/;"	p	class:kvs::CellTreeBuilder	access:public	signature:( CellTree& ct, const kvs::UnstructuredVolumeObject* ds )
build	main.cpp	/^	locator_d->build();$/;"	p	file:	signature:()
build	main.cpp	/^	locator_s->build();$/;"	p	file:	signature:()
byteSize	StochasticPointRenderer.h	/^    const size_t byteSize( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
byteSizeOfCell	StochasticVolumeRenderer.h	/^    const size_t byteSizeOfCell( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
byteSizeOfVertex	StochasticVolumeRenderer.h	/^    const size_t byteSizeOfVertex( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
byteSizePerCell	StochasticVolumeRenderer.h	/^    const size_t byteSizePerCell( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
byteSizePerVertex	StochasticPointRenderer.h	/^    const size_t byteSizePerVertex( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
byteSizePerVertex	StochasticVolumeRenderer.h	/^    const size_t byteSizePerVertex( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
c	CellTree.cpp	/^                float c = lvol*sum + rvol*(size-sum);$/;"	l
c	CellTree.cpp	/^            float c = lvol*sum + rvol*(size-sum);$/;"	l
calculate_triangle_connections	PolygonToPolygon.h	/^    void calculate_triangle_connections( const kvs::PolygonObject* object );$/;"	p	class:kvs::PolygonToPolygon	access:private	signature:( const kvs::PolygonObject* object )
calculate_triangle_normals	PolygonToPolygon.h	/^    void calculate_triangle_normals( void );$/;"	p	class:kvs::PolygonToPolygon	access:private	signature:( void )
calculate_zooming_factor	StochasticPointRenderer.h	/^    void calculate_zooming_factor( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:private	signature:( void )
cell	CellLocator.h	/^    const kvs::CellBase<float>* cell() { return m_cell; }$/;"	f	class:kvs::CellLocator	access:public	signature:()
cellTree	CellLocatorBIH.cpp	/^const CellTree* CellLocatorBIH::cellTree() const$/;"	f	class:kvs::CellLocatorBIH	signature:() const
cellTree	CellLocatorBIH.h	/^    const kvs::CellTree* cellTree( void ) const;$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( void ) const
cen	CellTree.cpp	/^                float cen = (pc->min[d] + pc->max[d])\/2.0f;	\/\/center of a certain dimension$/;"	l
cen	CellTree.cpp	/^            float cen = (pc->min[d] + pc->max[d])\/2.0f;	\/\/center of a certain dimension$/;"	l
center	CellLocator.cpp	/^    kvs::Vector3f center;$/;"	l
center	CellLocator.cpp	/^kvs::Vector3f CellLocator::center( size_t cellid ) const$/;"	f	class:kvs::CellLocator	signature:( size_t cellid ) const
center	CellLocator.h	/^    kvs::Vector3f center( size_t cellid ) const;$/;"	p	class:kvs::CellLocator	access:public	signature:( size_t cellid ) const
center_order	CellTree.h	/^        center_order( unsigned int _d ) : $/;"	f	struct:__anon1::center_order	access:public	signature:( unsigned int _d )
center_order	CellTree.h	/^    struct center_order$/;"	s	namespace:__anon1
cerr	CellLocatorBIH.cpp	/^        std::cerr << "CellLocator Mode parameter error!\\n";$/;"	m	class:kvs::std	file:
cerr	CellLocatorBIH.cpp	/^        std::cerr << "No dataset! \\n";$/;"	m	class:kvs::std	file:
changeObject	StochasticRenderer.h	/^    void changeObject($/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( kvs::ObjectBase* object, kvs::glew::StochasticRendererBase* renderer, const bool is_delete = true )
check	CellLocator.h	/^    virtual bool check( const kvs::CellLocator* locator ) = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:( const kvs::CellLocator* locator )
check	CellLocatorBIH.cpp	/^bool CellLocatorBIH::check( const kvs::CellLocator* locator )$/;"	f	class:kvs::CellLocatorBIH	signature:( const kvs::CellLocator* locator )
check	CellLocatorBIH.h	/^    bool check( const kvs::CellLocator* locator );$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( const kvs::CellLocator* locator )
check	CellTree.cpp	/^const bool SplitThread::check()$/;"	f	class:kvs::SplitThread	signature:()
check	CellTree.h	/^	const bool check();$/;"	p	class:kvs::SplitThread	access:public	signature:()
child	CellTree.cpp	/^    kvs::CellTree::node child[2];$/;"	l
clear	CellTree.cpp	/^	m_nodes.clear();$/;"	p	file:	signature:()
clear	CellTree.cpp	/^	m_nodes1.clear();$/;"	p	file:	signature:()
clear	CellTree.cpp	/^	m_nodes2.clear();$/;"	p	file:	signature:()
clear	CellTree.h	/^		leaves.clear();$/;"	p	signature:()
clear	CellTree.h	/^		nodes.clear();$/;"	p	signature:()
clear	StochasticRenderer.h	/^    void clear( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( void )
clear	StochasticRendererBase.h	/^    void clear( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
clearCache	CellLocator.h	/^    virtual void clearCache() = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:()
clearCache	CellLocatorBIH.cpp	/^void CellLocatorBIH::clearCache()$/;"	f	class:kvs::CellLocatorBIH	signature:()
clearCache	CellLocatorBIH.h	/^    void clearCache();$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:()
clearEnsembleBuffer	StochasticLineRenderer.h	/^    void clearEnsembleBuffer( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
clearEnsembleBuffer	StochasticPointRenderer.h	/^    void clearEnsembleBuffer( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
clearEnsembleBuffer	StochasticPolygonRenderer.h	/^    void clearEnsembleBuffer( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
clearEnsembleBuffer	StochasticRenderer.h	/^    void clearEnsembleBuffer( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( void )
clearEnsembleBuffer	StochasticRendererBase.h	/^    virtual void clearEnsembleBuffer( void ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
clearEnsembleBuffer	StochasticVolumeRenderer.h	/^    void clearEnsembleBuffer( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
clip	CellTree.cpp	/^        float clip[2] = { lmax[dim], rmin[dim] };$/;"	l
clip	CellTree.cpp	/^    float clip[2] = { lmax[dim], rmin[dim] };$/;"	l
close	CellLocatorBIH.cpp	/^    outfile.close();$/;"	p	file:	signature:()
cnt	CellTree.h	/^        unsigned int cnt;	\/\/counter of add()$/;"	m	struct:__anon1::bucket	access:public
colors	StochasticPointRenderer.h	/^    StochasticPointRenderer::ColorType* colors( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
colors	StochasticPointRenderer.h	/^    const StochasticPointRenderer::ColorType* colors( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
compute_exact_level	PreIntegrationTable.h	/^    void compute_exact_level( const int level, const float dl );$/;"	p	class:kvs::glew::PreIntegrationTable	access:private	signature:( const int level, const float dl )
compute_incremental_level	PreIntegrationTable.h	/^    void compute_incremental_level($/;"	p	class:kvs::glew::PreIntegrationTable	access:private	signature:( const int current_level, const int previous_level, const int first_level, const float l, const float dl )
connections	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::ConnectType* connections( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
connections	StochasticVolumeRenderer.h	/^    const StochasticVolumeRenderer::ConnectType* connections( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
coords	StochasticPointRenderer.h	/^    StochasticPointRenderer::CoordType* coords( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
coords	StochasticPointRenderer.h	/^    const StochasticPointRenderer::CoordType* coords( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
coords	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::CoordType* coords( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
coords	StochasticVolumeRenderer.h	/^    const StochasticVolumeRenderer::CoordType* coords( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
cost	CellTree.cpp	/^        float cost = std::numeric_limits<float>::max();$/;"	l
cost	CellTree.cpp	/^    float cost = std::numeric_limits<float>::max();$/;"	l
cout	CellLocatorBIH.cpp	/^    std::cout << "Cell Tree ..." ;$/;"	m	class:kvs::std	file:
create	PreIntegrationTable.h	/^    void create( const float max_edge_length );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( const float max_edge_length )
create	StochasticPointRenderer.h	/^    void create( const size_t nvertices, const bool has_normal );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( const size_t nvertices, const bool has_normal )
create	StochasticVolumeRenderer.h	/^    void create( const size_t nsteps, const size_t nvertices, const size_t ncells );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( const size_t nsteps, const size_t nvertices, const size_t ncells )
createVertexBuffer	StochasticLineRenderer.h	/^    void createVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
createVertexBuffer	StochasticPointRenderer.h	/^    void createVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
createVertexBuffer	StochasticPolygonRenderer.h	/^    void createVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
createVertexBuffer	StochasticRendererBase.h	/^    virtual void createVertexBuffer( void ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
createVertexBuffer	StochasticVolumeRenderer.h	/^    void createVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
create_image	StochasticRenderer.h	/^    void create_image( const kvs::Camera* camera, const kvs::Light* light );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( const kvs::Camera* camera, const kvs::Light* light )
create_preintegration_table	StochasticVolumeRenderer.h	/^    void create_preintegration_table( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( void )
create_shaders	StochasticRendererBase.h	/^    void create_shaders($/;"	p	class:kvs::glew::StochasticRendererBase	access:protected	signature:( kvs::glew::ProgramObject& program_object, const kvs::glew::ShaderSource& vertex_source, const kvs::glew::ShaderSource& fragment_source )
create_shaders	StochasticVolumeRenderer.h	/^    void create_shaders($/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( kvs::glew::ProgramObject& program_object, const kvs::glew::ShaderSource& vertex_source, const kvs::glew::ShaderSource& geometry_source, const kvs::glew::ShaderSource& fragment_source )
create_texture	StochasticRenderer.h	/^    void create_texture($/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( kvs::Texture2D& texture, kvs::glew::FrameBufferObject& framebuffer, GLint internal_format, GLenum external_format, GLenum external_type, GLenum attachment )
create_vertexbuffer_from_point	StochasticPointRenderer.h	/^    void create_vertexbuffer_from_point( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:private	signature:( void )
create_vertexbuffer_from_volume	StochasticVolumeRenderer.h	/^    void create_vertexbuffer_from_volume( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( void )
ct	CellLocatorBIH.cpp	/^    kvs::CellTree* ct = new kvs::CellTree();$/;"	l
d	CellTree.h	/^        unsigned int       d;$/;"	m	struct:__anon1::left_predicate	access:public
d	CellTree.h	/^        unsigned int d;$/;"	m	struct:__anon1::center_order	access:public
dataset	CellLocator.h	/^    const kvs::UnstructuredVolumeObject* dataset() { return m_dataset; }$/;"	f	class:kvs::CellLocator	access:public	signature:()
deepCopy	NullObject.h	/^    void deepCopy( const NullObject& object );$/;"	p	class:kvs::NullObject	access:public	signature:( const NullObject& object )
dim	CellTree.cpp	/^        unsigned int dim;$/;"	l
dim	CellTree.cpp	/^    unsigned int dim;$/;"	l
dim	CellTree.h	/^        unsigned int dim() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
disableLODControl	StochasticRenderer.h	/^    void disableLODControl( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( void )
disableShading	StochasticRendererBase.h	/^    void disableShading( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
disableUpdateFlag	StochasticRendererBase.h	/^    void disableUpdateFlag( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
download	PreIntegrationTable.h	/^    void download( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
download	StochasticPointRenderer.h	/^    const bool download( kvs::glew::VertexBufferObject& vbo );$/;"	p	class:kvs::glew::StochasticPointRenderer::Renderer	access:public	signature:( kvs::glew::VertexBufferObject& vbo )
download	StochasticVolumeRenderer.h	/^    const bool download($/;"	p	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:public	signature:( kvs::glew::VertexBufferObject& vbo, kvs::glew::IndexBufferObject& ibo )
downloadVertexBuffer	StochasticLineRenderer.h	/^    void downloadVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
downloadVertexBuffer	StochasticPointRenderer.h	/^    void downloadVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
downloadVertexBuffer	StochasticPolygonRenderer.h	/^    void downloadVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
downloadVertexBuffer	StochasticRendererBase.h	/^    virtual void downloadVertexBuffer( void ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
downloadVertexBuffer	StochasticVolumeRenderer.h	/^    void downloadVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
draw	StochasticPointRenderer.h	/^    void draw( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Renderer	access:public	signature:( void ) const
draw	StochasticVolumeRenderer.h	/^    void draw( const size_t step ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:public	signature:( const size_t step ) const
drawVertexBuffer	StochasticLineRenderer.h	/^    void drawVertexBuffer( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( const float modelview_matrix[16] )
drawVertexBuffer	StochasticPointRenderer.h	/^    void drawVertexBuffer( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( const float modelview_matrix[16] )
drawVertexBuffer	StochasticPolygonRenderer.h	/^    void drawVertexBuffer( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( const float modelview_matrix[16] )
drawVertexBuffer	StochasticRendererBase.h	/^    virtual void drawVertexBuffer( const float modelview_matrix[16] ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( const float modelview_matrix[16] )
drawVertexBuffer	StochasticVolumeRenderer.h	/^    void drawVertexBuffer( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( const float modelview_matrix[16] )
enableLODControl	StochasticRenderer.h	/^    void enableLODControl( const size_t coarse_level = 1 );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( const size_t coarse_level = 1 )
enableShading	StochasticRendererBase.h	/^    void enableShading( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
enableUpdateFlag	StochasticRendererBase.h	/^    void enableUpdateFlag( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
end	CellLocatorBIH.cpp	/^            const unsigned int* end   = begin + n->size();$/;"	l
end	CellTree.cpp	/^        per_cell* end   = m_pc + start + size;$/;"	l
end	CellTree.cpp	/^    per_cell* end   = m_pc + start + size;$/;"	l
endl	CellLocator.cpp	/^        std::cerr << "no dataset!" << std::endl;$/;"	m	class:kvs::std	file:
endl	CellLocator.cpp	/^        std::cout << "v[" << i << "] = " << m_cell->vertices()[i] << std::endl;$/;"	m	class:kvs::std	file:
endl	CellLocatorBIH.cpp	/^        std::cout << "can't open " << filename << " for reading. read failed" << std::endl;$/;"	m	class:kvs::std	file:
endl	CellLocatorBIH.cpp	/^        std::cout << "can't open " << filename << " for writing. write failed" << std::endl;$/;"	m	class:kvs::std	file:
endl	CellLocatorBIH.cpp	/^    std::cout << "\\t " << timer.sec() << " seconds " << std::endl;$/;"	m	class:kvs::std	file:
endl	CellTree.cpp	/^		std::cout << "nnodes: " << m_nodes.size() << std::endl;$/;"	m	class:kvs::std	file:
endl	CellTree.cpp	/^		std::cout << "nnodes: " << node_size << std::endl;$/;"	m	class:kvs::std	file:
endl	CellTree.cpp	/^    std::cout << "max external coords found by kvs::BoundingBox:\\t" << max[0] << " " << max[1] << " "  << max[2] << " "  << std::endl;$/;"	m	class:kvs::std	file:
endl	CellTree.cpp	/^    std::cout << "min external coords found by kvs::BoundingBox:\\t" << min[0] << " " << min[1] << " "  << min[2] << " "  << std::endl;$/;"	m	class:kvs::std	file:
exec	PolygonToPolygon.h	/^    SuperClass* exec( const kvs::ObjectBase* object );$/;"	p	class:kvs::PolygonToPolygon	access:public	signature:( const kvs::ObjectBase* object )
exec	StochasticLineRenderer.h	/^    void exec( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light )
exec	StochasticPointRenderer.h	/^    void exec( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light )
exec	StochasticPolygonRenderer.h	/^    void exec( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light )
exec	StochasticRenderer.h	/^    void exec( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light )
exec	StochasticRendererBase.h	/^    virtual void exec($/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( kvs::ObjectBase* object, kvs::Camera* camera = NULL, kvs::Light* light = NULL )
exec	StochasticVolumeRenderer.h	/^    void exec( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light )
ext	CellTree.cpp	/^        const float ext[3] = { max[0]-min[0], max[1]-min[1], max[2]-min[2] }; $/;"	l
ext	CellTree.cpp	/^    const float ext[3] = { max[0]-min[0], max[1]-min[1], max[2]-min[2] }; $/;"	l
filename	main.cpp	/^	string filename = (argc == 2) ? argv[1] : $/;"	l
findCell	CellLocator.h	/^    virtual int findCell( const float pos[3] ) = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:( const float pos[3] )
findCell	CellLocatorBIH.cpp	/^int CellLocatorBIH::findCell( const float pos[3] )$/;"	f	class:kvs::CellLocatorBIH	signature:( const float pos[3] )
findCell	CellLocatorBIH.h	/^    int findCell( const float pos[3] );$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( const float pos[3] )
find_max_d	CellTree.cpp	/^void find_max_d( const per_cell* begin, const per_cell* end, unsigned int d, float& max )$/;"	f	namespace:__anon5	signature:( const per_cell* begin, const per_cell* end, unsigned int d, float& max )
find_max_d	CellTree.h	/^    void find_max_d( const per_cell* begin, const per_cell* end, unsigned int d, float& max );$/;"	p	namespace:__anon1	signature:( const per_cell* begin, const per_cell* end, unsigned int d, float& max )
find_min_d	CellTree.cpp	/^void find_min_d( const per_cell* begin, const per_cell* end, unsigned int d, float& min )$/;"	f	namespace:__anon5	signature:( const per_cell* begin, const per_cell* end, unsigned int d, float& min )
find_min_d	CellTree.h	/^    void find_min_d( const per_cell* begin, const per_cell* end, unsigned int d, float& min );$/;"	p	namespace:__anon1	signature:( const per_cell* begin, const per_cell* end, unsigned int d, float& min )
find_min_max	CellTree.cpp	/^void find_min_max( const per_cell* begin, const per_cell* end, float* min, float* max )$/;"	f	namespace:__anon5	signature:( const per_cell* begin, const per_cell* end, float* min, float* max )
find_min_max	CellTree.h	/^	void find_min_max( const per_cell* begin, const per_cell* end, float* min, float* max );$/;"	p	namespace:__anon1	signature:( const per_cell* begin, const per_cell* end, float* min, float* max )
glew	PreIntegrationTable.h	/^namespace glew$/;"	n	namespace:kvs
glew	StochasticLineRenderer.h	/^namespace glew$/;"	n	namespace:kvs
glew	StochasticPointRenderer.h	/^namespace glew$/;"	n	namespace:kvs
glew	StochasticPolygonRenderer.h	/^namespace glew$/;"	n	namespace:kvs
glew	StochasticRenderer.h	/^namespace glew$/;"	n	namespace:kvs
glew	StochasticRendererBase.h	/^namespace glew$/;"	n	namespace:kvs
glew	StochasticVolumeRenderer.h	/^namespace glew$/;"	n	namespace:kvs
hasNormal	StochasticPointRenderer.h	/^    const bool hasNormal( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
height	CellTree.h	/^    unsigned int height( node& node )$/;"	f	class:kvs::CellTree	access:public	signature:( node& node )
iext	CellTree.cpp	/^        const float iext[3] = { nbuckets\/ext[0], nbuckets\/ext[1], nbuckets\/ext[2] };$/;"	l
iext	CellTree.cpp	/^    const float iext[3] = { nbuckets\/ext[0], nbuckets\/ext[1], nbuckets\/ext[2] };$/;"	l
in_traversal_cached	CellTree.h	/^        in_traversal_cached( const CellTree& ct, const float* pos, unsigned int hint_stack[32], unsigned int* hint_sp, unsigned int hint_lrstack[16], unsigned int* hint_lrsp ):$/;"	f	struct:kvs::CellTree::in_traversal_cached	access:public	signature:( const CellTree& ct, const float* pos, unsigned int hint_stack[32], unsigned int* hint_sp, unsigned int hint_lrstack[16], unsigned int* hint_lrsp )
in_traversal_cached	CellTree.h	/^    struct in_traversal_cached$/;"	s	class:kvs::CellTree	access:public
ind	CellTree.cpp	/^                int   ind = (int)( (cen-min[d])*iext[d] );  $/;"	l
ind	CellTree.cpp	/^            int   ind = (int)( (cen-min[d])*iext[d] );  $/;"	l
ind	CellTree.h	/^        unsigned int ind;$/;"	m	struct:__anon1::per_cell	access:public
index	CellLocatorBIH.cpp	/^        unsigned int index;$/;"	l
index	CellTree.h	/^        unsigned int index;$/;"	m	struct:kvs::CellTree::node	access:public
indices	StochasticPointRenderer.h	/^    StochasticPointRenderer::IndexType* indices( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
indices	StochasticPointRenderer.h	/^    const StochasticPointRenderer::IndexType* indices( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
indices	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::IndexType* indices( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
indices	StochasticVolumeRenderer.h	/^    const StochasticVolumeRenderer::IndexType* indices( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
infile	CellLocatorBIH.cpp	/^    std::ifstream infile( filename, std::ios_base::in|std::ios_base::binary );$/;"	p	file:	signature:( filename, std::ios_base::in|std::ios_base::binary )
init	CellTree.cpp	/^	    m_thread[1].init( m_leafsize, &m_nodes2, m_pc2, 0, rmin, rmax );$/;"	p	file:	signature:( m_leafsize, &m_nodes2, m_pc2, 0, rmin, rmax )
init	CellTree.cpp	/^        m_thread[0].init( m_leafsize, &m_nodes1, m_pc1, 0, lmin, lmax );$/;"	p	file:	signature:( m_leafsize, &m_nodes1, m_pc1, 0, lmin, lmax )
init	CellTree.cpp	/^void SplitThread::init( $/;"	f	class:kvs::SplitThread	signature:( unsigned int leafsize, std::vector<CellTree::node>* p_nodes, per_cell* pc, unsigned int index, float min[3], float max[3] )
init	CellTree.h	/^	void init($/;"	p	class:kvs::SplitThread	access:public	signature:( unsigned int leafsize, std::vector<CellTree::node>* p_nodes, per_cell* pc, unsigned int index, float min[3], float max[3] )
initialize	StochasticLineRenderer.h	/^    void initialize( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
initialize	StochasticPointRenderer.h	/^    void initialize( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
initialize	StochasticPolygonRenderer.h	/^    void initialize( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
initialize	StochasticRenderer.h	/^    void initialize( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( void )
initialize	StochasticRendererBase.h	/^    void initialize( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
initialize	StochasticVolumeRenderer.h	/^    void initialize( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
initializeCell	CellLocator.cpp	/^void CellLocator::initializeCell()$/;"	f	class:kvs::CellLocator	signature:()
initializeCell	CellLocator.h	/^    void initializeCell();$/;"	p	class:kvs::CellLocator	access:public	signature:()
initializeShader	StochasticLineRenderer.h	/^    void initializeShader( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
initializeShader	StochasticPointRenderer.h	/^    void initializeShader( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
initializeShader	StochasticPolygonRenderer.h	/^    void initializeShader( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
initializeShader	StochasticRendererBase.h	/^    virtual void initializeShader( void ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
initializeShader	StochasticVolumeRenderer.h	/^    void initializeShader( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
initialize_decomposition_texture	StochasticVolumeRenderer.h	/^    void initialize_decomposition_texture( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( void )
initialize_framebuffer_texture	StochasticRenderer.h	/^    void initialize_framebuffer_texture( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( void )
initialize_opengl	StochasticRenderer.h	/^    void initialize_opengl( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( void )
initialize_random_texture	StochasticRenderer.h	/^    void initialize_random_texture( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( void )
insert	CellTree.cpp	/^    m_nodes.insert( m_nodes.end(), child, child+2 );$/;"	p	file:	signature:( m_nodes.end(), child, child+2 )
insert	CellTree.cpp	/^    nodes.insert( nodes.end(), child, child+2 );$/;"	p	file:	signature:( nodes.end(), child, child+2 )
isDegenerate	CellLocator.h	/^    virtual bool isDegenerate() const = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:() const
isDegenerate	CellLocatorBIH.cpp	/^bool CellLocatorBIH::isDegenerate() const$/;"	f	class:kvs::CellLocatorBIH	signature:() const
isDegenerate	CellLocatorBIH.h	/^    bool isDegenerate() const;$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:() const
isDownloaded	PreIntegrationTable.h	/^    const bool isDownloaded( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
isEnabledShading	StochasticRendererBase.h	/^    const bool isEnabledShading( void ) const;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void ) const
isTexture	PreIntegrationTable.h	/^    const bool isTexture( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
isUpdate	StochasticRendererBase.h	/^    const bool isUpdate( void ) const;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void ) const
is_leaf	CellTree.h	/^        bool is_leaf() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
is_node	CellTree.h	/^        bool is_node() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
kvs	BoundingBox.h	/^namespace kvs$/;"	n
kvs	CellLocator.cpp	/^namespace kvs$/;"	n	file:
kvs	CellLocator.h	/^namespace kvs{$/;"	n
kvs	CellLocatorBIH.cpp	/^namespace kvs$/;"	n	file:
kvs	CellLocatorBIH.h	/^namespace kvs$/;"	n
kvs	CellTree.cpp	/^namespace kvs$/;"	n	file:
kvs	CellTree.h	/^namespace kvs$/;"	n
kvs	NullObject.h	/^namespace kvs$/;"	n
kvs	PolygonToPolygon.h	/^namespace kvs$/;"	n
kvs	PreIntegrationTable.h	/^namespace kvs$/;"	n
kvs	SPTDecompositionTable.h	/^namespace kvs$/;"	n
kvs	StochasticLineRenderer.h	/^namespace kvs$/;"	n
kvs	StochasticPointRenderer.h	/^namespace kvs$/;"	n
kvs	StochasticPolygonRenderer.h	/^namespace kvs$/;"	n
kvs	StochasticRenderer.h	/^namespace kvs$/;"	n
kvs	StochasticRendererBase.h	/^namespace kvs$/;"	n
kvs	StochasticVolumeRenderer.h	/^namespace kvs$/;"	n
kvs::BoundingBox	BoundingBox.h	/^    class BoundingBox$/;"	c	namespace:kvs
kvs::BoundingBox::BoundingBox	BoundingBox.h	/^        BoundingBox();$/;"	p	class:kvs::BoundingBox	access:public	signature:()
kvs::BoundingBox::BoundingBox	BoundingBox.h	/^        BoundingBox(const kvs::UnstructuredVolumeObject* object, size_t cindex);		\/\/\/<	create a bounding box based on a specific object and cell index $/;"	p	class:kvs::BoundingBox	access:public	signature:(const kvs::UnstructuredVolumeObject* object, size_t cindex)
kvs::BoundingBox::bounds	BoundingBox.h	/^        const float* bounds() const;$/;"	p	class:kvs::BoundingBox	access:public	signature:() const
kvs::BoundingBox::m_bounds	BoundingBox.h	/^        float m_bounds[6];$/;"	m	class:kvs::BoundingBox	access:private
kvs::BoundingBox::~BoundingBox	BoundingBox.h	/^        ~BoundingBox();$/;"	p	class:kvs::BoundingBox	access:public	signature:()
kvs::CellLocator	CellLocator.h	/^class CellLocator$/;"	c	namespace:kvs
kvs::CellLocator::CACHEFULL	CellLocator.h	/^        CACHEFULL = 2$/;"	e	enum:kvs::CellLocator::Mode
kvs::CellLocator::CACHEHALF	CellLocator.h	/^        CACHEHALF  = 1,$/;"	e	enum:kvs::CellLocator::Mode
kvs::CellLocator::CACHEOFF	CellLocator.h	/^        CACHEOFF = 0,$/;"	e	enum:kvs::CellLocator::Mode
kvs::CellLocator::CellLocator	CellLocator.cpp	/^CellLocator::CellLocator( const kvs::UnstructuredVolumeObject* volume ):$/;"	f	class:kvs::CellLocator	signature:( const kvs::UnstructuredVolumeObject* volume )
kvs::CellLocator::CellLocator	CellLocator.cpp	/^CellLocator::CellLocator()$/;"	f	class:kvs::CellLocator	signature:()
kvs::CellLocator::CellLocator	CellLocator.h	/^    CellLocator( const kvs::UnstructuredVolumeObject* volume );$/;"	p	class:kvs::CellLocator	access:public	signature:( const kvs::UnstructuredVolumeObject* volume )
kvs::CellLocator::CellLocator	CellLocator.h	/^    CellLocator();$/;"	p	class:kvs::CellLocator	access:public	signature:()
kvs::CellLocator::Mode	CellLocator.h	/^    enum Mode$/;"	g	class:kvs::CellLocator	access:public
kvs::CellLocator::build	CellLocator.h	/^    virtual void build() = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:()
kvs::CellLocator::cell	CellLocator.h	/^    const kvs::CellBase<float>* cell() { return m_cell; }$/;"	f	class:kvs::CellLocator	access:public	signature:()
kvs::CellLocator::center	CellLocator.cpp	/^kvs::Vector3f CellLocator::center( size_t cellid ) const$/;"	f	class:kvs::CellLocator	signature:( size_t cellid ) const
kvs::CellLocator::center	CellLocator.h	/^    kvs::Vector3f center( size_t cellid ) const;$/;"	p	class:kvs::CellLocator	access:public	signature:( size_t cellid ) const
kvs::CellLocator::check	CellLocator.h	/^    virtual bool check( const kvs::CellLocator* locator ) = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:( const kvs::CellLocator* locator )
kvs::CellLocator::clearCache	CellLocator.h	/^    virtual void clearCache() = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:()
kvs::CellLocator::dataset	CellLocator.h	/^    const kvs::UnstructuredVolumeObject* dataset() { return m_dataset; }$/;"	f	class:kvs::CellLocator	access:public	signature:()
kvs::CellLocator::findCell	CellLocator.h	/^    virtual int findCell( const float pos[3] ) = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:( const float pos[3] )
kvs::CellLocator::initializeCell	CellLocator.cpp	/^void CellLocator::initializeCell()$/;"	f	class:kvs::CellLocator	signature:()
kvs::CellLocator::initializeCell	CellLocator.h	/^    void initializeCell();$/;"	p	class:kvs::CellLocator	access:public	signature:()
kvs::CellLocator::isDegenerate	CellLocator.h	/^    virtual bool isDegenerate() const = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:() const
kvs::CellLocator::kvsClassName	CellLocator.h	/^    kvsClassName( kvs::CellLocator );$/;"	p	class:kvs::CellLocator	access:private	signature:( kvs::CellLocator )
kvs::CellLocator::m_cell	CellLocator.h	/^    kvs::CellBase<float>*                   m_cell;$/;"	m	class:kvs::CellLocator	access:protected
kvs::CellLocator::m_dataset	CellLocator.h	/^    const kvs::UnstructuredVolumeObject*    m_dataset;$/;"	m	class:kvs::CellLocator	access:protected
kvs::CellLocator::m_mode	CellLocator.h	/^    Mode                                    m_mode;$/;"	m	class:kvs::CellLocator	access:protected
kvs::CellLocator::mode	CellLocator.h	/^    const CellLocator::Mode mode() const { return m_mode; } $/;"	f	class:kvs::CellLocator	access:public	signature:() const
kvs::CellLocator::printVertices	CellLocator.cpp	/^void CellLocator::printVertices() const$/;"	f	class:kvs::CellLocator	signature:() const
kvs::CellLocator::printVertices	CellLocator.h	/^    void printVertices() const;$/;"	p	class:kvs::CellLocator	access:public	signature:() const
kvs::CellLocator::randomCellindex	CellLocator.cpp	/^size_t CellLocator::randomCellindex() const$/;"	f	class:kvs::CellLocator	signature:() const
kvs::CellLocator::randomCellindex	CellLocator.h	/^    size_t randomCellindex() const;$/;"	p	class:kvs::CellLocator	access:public	signature:() const
kvs::CellLocator::read	CellLocator.h	/^    virtual bool read( const std::string filename ) = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:( const std::string filename )
kvs::CellLocator::setDataSet	CellLocator.h	/^    void setDataSet( const kvs::UnstructuredVolumeObject* volume ){ m_dataset = volume; }$/;"	f	class:kvs::CellLocator	access:public	signature:( const kvs::UnstructuredVolumeObject* volume )
kvs::CellLocator::setMode	CellLocator.h	/^    void setMode( const CellLocator::Mode mode ){ m_mode = mode; }$/;"	f	class:kvs::CellLocator	access:public	signature:( const CellLocator::Mode mode )
kvs::CellLocator::testCell	CellLocator.cpp	/^bool CellLocator::testCell( size_t cellid, const float pos[3] ) const$/;"	f	class:kvs::CellLocator	signature:( size_t cellid, const float pos[3] ) const
kvs::CellLocator::testCell	CellLocator.h	/^    bool testCell( size_t cellid, const float pos[3] ) const;$/;"	p	class:kvs::CellLocator	access:public	signature:( size_t cellid, const float pos[3] ) const
kvs::CellLocator::write	CellLocator.h	/^    virtual bool write( const std::string filename ) = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:( const std::string filename )
kvs::CellLocator::~CellLocator	CellLocator.cpp	/^CellLocator::~CellLocator()$/;"	f	class:kvs::CellLocator	signature:()
kvs::CellLocator::~CellLocator	CellLocator.h	/^    virtual ~CellLocator();$/;"	p	class:kvs::CellLocator	access:public	signature:()
kvs::CellLocatorBIH	CellLocatorBIH.h	/^class CellLocatorBIH : public CellLocator$/;"	c	namespace:kvs	inherits:CellLocator
kvs::CellLocatorBIH::BaseClass	CellLocatorBIH.h	/^    typedef CellLocator BaseClass;$/;"	t	class:kvs::CellLocatorBIH	access:public
kvs::CellLocatorBIH::CellLocatorBIH	CellLocatorBIH.cpp	/^CellLocatorBIH::CellLocatorBIH( const kvs::UnstructuredVolumeObject* volume ):$/;"	f	class:kvs::CellLocatorBIH	signature:( const kvs::UnstructuredVolumeObject* volume )
kvs::CellLocatorBIH::CellLocatorBIH	CellLocatorBIH.cpp	/^CellLocatorBIH::CellLocatorBIH()$/;"	f	class:kvs::CellLocatorBIH	signature:()
kvs::CellLocatorBIH::CellLocatorBIH	CellLocatorBIH.h	/^    CellLocatorBIH( const kvs::UnstructuredVolumeObject* volume );$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( const kvs::UnstructuredVolumeObject* volume )
kvs::CellLocatorBIH::CellLocatorBIH	CellLocatorBIH.h	/^    CellLocatorBIH();$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:()
kvs::CellLocatorBIH::build	CellLocatorBIH.cpp	/^void CellLocatorBIH::build()$/;"	f	class:kvs::CellLocatorBIH	signature:()
kvs::CellLocatorBIH::build	CellLocatorBIH.h	/^    void build();$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:()
kvs::CellLocatorBIH::cellTree	CellLocatorBIH.cpp	/^const CellTree* CellLocatorBIH::cellTree() const$/;"	f	class:kvs::CellLocatorBIH	signature:() const
kvs::CellLocatorBIH::cellTree	CellLocatorBIH.h	/^    const kvs::CellTree* cellTree( void ) const;$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( void ) const
kvs::CellLocatorBIH::check	CellLocatorBIH.cpp	/^bool CellLocatorBIH::check( const kvs::CellLocator* locator )$/;"	f	class:kvs::CellLocatorBIH	signature:( const kvs::CellLocator* locator )
kvs::CellLocatorBIH::check	CellLocatorBIH.h	/^    bool check( const kvs::CellLocator* locator );$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( const kvs::CellLocator* locator )
kvs::CellLocatorBIH::clearCache	CellLocatorBIH.cpp	/^void CellLocatorBIH::clearCache()$/;"	f	class:kvs::CellLocatorBIH	signature:()
kvs::CellLocatorBIH::clearCache	CellLocatorBIH.h	/^    void clearCache();$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:()
kvs::CellLocatorBIH::findCell	CellLocatorBIH.cpp	/^int CellLocatorBIH::findCell( const float pos[3] )$/;"	f	class:kvs::CellLocatorBIH	signature:( const float pos[3] )
kvs::CellLocatorBIH::findCell	CellLocatorBIH.h	/^    int findCell( const float pos[3] );$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( const float pos[3] )
kvs::CellLocatorBIH::isDegenerate	CellLocatorBIH.cpp	/^bool CellLocatorBIH::isDegenerate() const$/;"	f	class:kvs::CellLocatorBIH	signature:() const
kvs::CellLocatorBIH::isDegenerate	CellLocatorBIH.h	/^    bool isDegenerate() const;$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:() const
kvs::CellLocatorBIH::m_builder	CellLocatorBIH.h	/^    CellTreeBuilder*                       m_builder; $/;"	m	class:kvs::CellLocatorBIH	access:private
kvs::CellLocatorBIH::m_cache1	CellLocatorBIH.h	/^    unsigned int                           m_cache1[32];$/;"	m	class:kvs::CellLocatorBIH	access:private
kvs::CellLocatorBIH::m_cache2	CellLocatorBIH.h	/^    unsigned int                           m_cache2[16];$/;"	m	class:kvs::CellLocatorBIH	access:private
kvs::CellLocatorBIH::m_celltree	CellLocatorBIH.h	/^    mutable CellTree*                      m_celltree;$/;"	m	class:kvs::CellLocatorBIH	access:private
kvs::CellLocatorBIH::m_cp1	CellLocatorBIH.h	/^    unsigned int*                          m_cp1;$/;"	m	class:kvs::CellLocatorBIH	access:private
kvs::CellLocatorBIH::m_cp2	CellLocatorBIH.h	/^    unsigned int*                          m_cp2;$/;"	m	class:kvs::CellLocatorBIH	access:private
kvs::CellLocatorBIH::read	CellLocatorBIH.cpp	/^bool CellLocatorBIH::read( const std::string filename )$/;"	f	class:kvs::CellLocatorBIH	signature:( const std::string filename )
kvs::CellLocatorBIH::read	CellLocatorBIH.h	/^    bool read( const std::string filename );$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( const std::string filename )
kvs::CellLocatorBIH::setCellTree	CellLocatorBIH.cpp	/^void CellLocatorBIH::setCellTree( const kvs::CellTree* ct )$/;"	f	class:kvs::CellLocatorBIH	signature:( const kvs::CellTree* ct )
kvs::CellLocatorBIH::setCellTree	CellLocatorBIH.h	/^    void setCellTree( const kvs::CellTree* ct );$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( const kvs::CellTree* ct )
kvs::CellLocatorBIH::setParallel	CellLocatorBIH.cpp	/^void CellLocatorBIH::setParallel()$/;"	f	class:kvs::CellLocatorBIH	signature:()
kvs::CellLocatorBIH::setParallel	CellLocatorBIH.h	/^	void setParallel();$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:()
kvs::CellLocatorBIH::write	CellLocatorBIH.cpp	/^bool CellLocatorBIH::write( const std::string filename )$/;"	f	class:kvs::CellLocatorBIH	signature:( const std::string filename )
kvs::CellLocatorBIH::write	CellLocatorBIH.h	/^    bool write( const std::string filename );$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( const std::string filename )
kvs::CellLocatorBIH::~CellLocatorBIH	CellLocatorBIH.cpp	/^CellLocatorBIH::~CellLocatorBIH()$/;"	f	class:kvs::CellLocatorBIH	signature:()
kvs::CellLocatorBIH::~CellLocatorBIH	CellLocatorBIH.h	/^    ~CellLocatorBIH();$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:()
kvs::CellTree	CellTree.h	/^class CellTree$/;"	c	namespace:kvs
kvs::CellTree::CellTree	CellTree.h	/^	CellTree(){}$/;"	f	class:kvs::CellTree	access:public	signature:()
kvs::CellTree::clear	CellTree.h	/^		leaves.clear();$/;"	p	signature:()
kvs::CellTree::clear	CellTree.h	/^		nodes.clear();$/;"	p	signature:()
kvs::CellTree::height	CellTree.h	/^    unsigned int height( node& node )$/;"	f	class:kvs::CellTree	access:public	signature:( node& node )
kvs::CellTree::in_traversal_cached	CellTree.h	/^    struct in_traversal_cached$/;"	s	class:kvs::CellTree	access:public
kvs::CellTree::in_traversal_cached::in_traversal_cached	CellTree.h	/^        in_traversal_cached( const CellTree& ct, const float* pos, unsigned int hint_stack[32], unsigned int* hint_sp, unsigned int hint_lrstack[16], unsigned int* hint_lrsp ):$/;"	f	struct:kvs::CellTree::in_traversal_cached	access:public	signature:( const CellTree& ct, const float* pos, unsigned int hint_stack[32], unsigned int* hint_sp, unsigned int hint_lrstack[16], unsigned int* hint_lrsp )
kvs::CellTree::in_traversal_cached::l	CellTree.h	/^                bool l = p <= n->lmax();$/;"	l
kvs::CellTree::in_traversal_cached::left	CellTree.h	/^                const unsigned int left = n->left();    \/\/ get the VECTOR STORAGE index of the left child$/;"	l
kvs::CellTree::in_traversal_cached::lr_sp	CellTree.h	/^        const unsigned int* lr_sp()$/;"	f	struct:kvs::CellTree::in_traversal_cached	access:public	signature:()
kvs::CellTree::in_traversal_cached::lr_stack	CellTree.h	/^        const unsigned int* lr_stack()$/;"	f	struct:kvs::CellTree::in_traversal_cached	access:public	signature:()
kvs::CellTree::in_traversal_cached::m_ct	CellTree.h	/^        const CellTree&		    m_ct;$/;"	m	struct:kvs::CellTree::in_traversal_cached	access:public
kvs::CellTree::in_traversal_cached::m_lrsp	CellTree.h	/^        unsigned int*           m_lrsp;$/;"	m	struct:kvs::CellTree::in_traversal_cached	access:public
kvs::CellTree::in_traversal_cached::m_lrstack	CellTree.h	/^        unsigned int            m_lrstack[16];$/;"	m	struct:kvs::CellTree::in_traversal_cached	access:public
kvs::CellTree::in_traversal_cached::m_pos	CellTree.h	/^        const float*			m_pos;$/;"	m	struct:kvs::CellTree::in_traversal_cached	access:public
kvs::CellTree::in_traversal_cached::m_sp	CellTree.h	/^        unsigned int*			m_sp;$/;"	m	struct:kvs::CellTree::in_traversal_cached	access:public
kvs::CellTree::in_traversal_cached::m_stack	CellTree.h	/^        unsigned int			m_stack[32];$/;"	m	struct:kvs::CellTree::in_traversal_cached	access:public
kvs::CellTree::in_traversal_cached::n	CellTree.h	/^                const CellTree::node* n = &m_ct.nodes.front() + *(--m_sp);$/;"	l
kvs::CellTree::in_traversal_cached::n	CellTree.h	/^            int n = hint_sp - hint_stack;     \/\/ initialize stack pointer $/;"	l
kvs::CellTree::in_traversal_cached::next	CellTree.h	/^        const CellTree::node* next()$/;"	f	struct:kvs::CellTree::in_traversal_cached	access:public	signature:()
kvs::CellTree::in_traversal_cached::p	CellTree.h	/^                const float p = m_pos[n->dim()];        \/\/ the value corresponding to split dim of the node$/;"	l
kvs::CellTree::in_traversal_cached::r	CellTree.h	/^                bool r = p > n->rmin();$/;"	l
kvs::CellTree::in_traversal_cached::sp	CellTree.h	/^        const unsigned int* sp()$/;"	f	struct:kvs::CellTree::in_traversal_cached	access:public	signature:()
kvs::CellTree::in_traversal_cached::stack	CellTree.h	/^        const unsigned int* stack()$/;"	f	struct:kvs::CellTree::in_traversal_cached	access:public	signature:()
kvs::CellTree::leaves	CellTree.h	/^    std::vector<unsigned int> leaves;$/;"	m	class:kvs::CellTree	access:public
kvs::CellTree::node	CellTree.h	/^    struct node$/;"	s	class:kvs::CellTree	access:public
kvs::CellTree::node::__anon2::__anon3::lm	CellTree.h	/^                float lm;$/;"	m	struct:kvs::CellTree::node::__anon2::__anon3	access:public
kvs::CellTree::node::__anon2::__anon3::rm	CellTree.h	/^                float rm;$/;"	m	struct:kvs::CellTree::node::__anon2::__anon3	access:public
kvs::CellTree::node::__anon2::__anon4::st	CellTree.h	/^                unsigned int st;$/;"	m	struct:kvs::CellTree::node::__anon2::__anon4	access:public
kvs::CellTree::node::__anon2::__anon4::sz	CellTree.h	/^                unsigned int sz;$/;"	m	struct:kvs::CellTree::node::__anon2::__anon4	access:public
kvs::CellTree::node::dim	CellTree.h	/^        unsigned int dim() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
kvs::CellTree::node::index	CellTree.h	/^        unsigned int index;$/;"	m	struct:kvs::CellTree::node	access:public
kvs::CellTree::node::is_leaf	CellTree.h	/^        bool is_leaf() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
kvs::CellTree::node::is_node	CellTree.h	/^        bool is_node() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
kvs::CellTree::node::left	CellTree.h	/^        unsigned int left() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
kvs::CellTree::node::lmax	CellTree.h	/^        const float& lmax() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
kvs::CellTree::node::make_leaf	CellTree.h	/^        void make_leaf( unsigned int start, unsigned int size )$/;"	f	struct:kvs::CellTree::node	access:public	signature:( unsigned int start, unsigned int size )
kvs::CellTree::node::make_node	CellTree.h	/^        void make_node( unsigned int left, unsigned int d, float b[2] )$/;"	f	struct:kvs::CellTree::node	access:public	signature:( unsigned int left, unsigned int d, float b[2] )
kvs::CellTree::node::right	CellTree.h	/^        unsigned int right() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
kvs::CellTree::node::rmin	CellTree.h	/^        const float& rmin() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
kvs::CellTree::node::set_children	CellTree.h	/^        void set_children( unsigned int left )$/;"	f	struct:kvs::CellTree::node	access:public	signature:( unsigned int left )
kvs::CellTree::node::size	CellTree.h	/^        unsigned int size() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
kvs::CellTree::node::start	CellTree.h	/^        unsigned int start() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
kvs::CellTree::nodes	CellTree.h	/^    std::vector<node>         nodes;$/;"	m	class:kvs::CellTree	access:public
kvs::CellTree::pre_traversal	CellTree.h	/^    struct pre_traversal$/;"	s	class:kvs::CellTree	access:public
kvs::CellTree::pre_traversal::l	CellTree.h	/^                bool l = p <= n->lmax();$/;"	l
kvs::CellTree::pre_traversal::left	CellTree.h	/^                const unsigned int left = n->left();    \/\/ get the VECTOR STORAGE index of the left child$/;"	l
kvs::CellTree::pre_traversal::m_ct	CellTree.h	/^        const CellTree&		    m_ct;$/;"	m	struct:kvs::CellTree::pre_traversal	access:public
kvs::CellTree::pre_traversal::m_pos	CellTree.h	/^        const float*			m_pos;$/;"	m	struct:kvs::CellTree::pre_traversal	access:public
kvs::CellTree::pre_traversal::m_sp	CellTree.h	/^        unsigned int*			m_sp;$/;"	m	struct:kvs::CellTree::pre_traversal	access:public
kvs::CellTree::pre_traversal::m_stack	CellTree.h	/^        unsigned int			m_stack[32];$/;"	m	struct:kvs::CellTree::pre_traversal	access:public
kvs::CellTree::pre_traversal::n	CellTree.h	/^                const CellTree::node* n = &m_ct.nodes.front() + *(--m_sp);$/;"	l
kvs::CellTree::pre_traversal::next	CellTree.h	/^        const CellTree::node* next()$/;"	f	struct:kvs::CellTree::pre_traversal	access:public	signature:()
kvs::CellTree::pre_traversal::p	CellTree.h	/^                const float p = m_pos[n->dim()];        \/\/ the value corresponding to split dim of the node$/;"	l
kvs::CellTree::pre_traversal::pre_traversal	CellTree.h	/^        pre_traversal( const CellTree& ct, const float* pos ) :$/;"	f	struct:kvs::CellTree::pre_traversal	access:public	signature:( const CellTree& ct, const float* pos )
kvs::CellTree::pre_traversal::r	CellTree.h	/^                bool r = p > n->rmin();$/;"	l
kvs::CellTree::pre_traversal_cached	CellTree.h	/^    struct pre_traversal_cached$/;"	s	class:kvs::CellTree	access:public
kvs::CellTree::pre_traversal_cached::l	CellTree.h	/^                bool l = p <= n->lmax();$/;"	l
kvs::CellTree::pre_traversal_cached::left	CellTree.h	/^                const unsigned int left = n->left();    \/\/ get the VECTOR STORAGE index of the left child$/;"	l
kvs::CellTree::pre_traversal_cached::m_ct	CellTree.h	/^        const CellTree&		    m_ct;$/;"	m	struct:kvs::CellTree::pre_traversal_cached	access:public
kvs::CellTree::pre_traversal_cached::m_pos	CellTree.h	/^        const float*			m_pos;$/;"	m	struct:kvs::CellTree::pre_traversal_cached	access:public
kvs::CellTree::pre_traversal_cached::m_sp	CellTree.h	/^        unsigned int*			m_sp;$/;"	m	struct:kvs::CellTree::pre_traversal_cached	access:public
kvs::CellTree::pre_traversal_cached::m_stack	CellTree.h	/^        unsigned int            m_stack[32];$/;"	m	struct:kvs::CellTree::pre_traversal_cached	access:public
kvs::CellTree::pre_traversal_cached::n	CellTree.h	/^                const CellTree::node* n = &m_ct.nodes.front() + *(--m_sp);$/;"	l
kvs::CellTree::pre_traversal_cached::next	CellTree.h	/^        const CellTree::node* next()$/;"	f	struct:kvs::CellTree::pre_traversal_cached	access:public	signature:()
kvs::CellTree::pre_traversal_cached::p	CellTree.h	/^                const float p = m_pos[n->dim()];        \/\/ the value corresponding to split dim of the node$/;"	l
kvs::CellTree::pre_traversal_cached::pre_traversal_cached	CellTree.h	/^        pre_traversal_cached( const CellTree& ct, const float* pos, const unsigned int previous_index ) :$/;"	f	struct:kvs::CellTree::pre_traversal_cached	access:public	signature:( const CellTree& ct, const float* pos, const unsigned int previous_index )
kvs::CellTree::pre_traversal_cached::r	CellTree.h	/^                bool r = p > n->rmin();$/;"	l
kvs::CellTree::pre_traversal_cached::sp	CellTree.h	/^        const unsigned int* sp()$/;"	f	struct:kvs::CellTree::pre_traversal_cached	access:public	signature:()
kvs::CellTree::pre_traversal_cached::stack	CellTree.h	/^        const unsigned int* stack()$/;"	f	struct:kvs::CellTree::pre_traversal_cached	access:public	signature:()
kvs::CellTree::~CellTree	CellTree.h	/^	~CellTree()$/;"	f	class:kvs::CellTree	access:public	signature:()
kvs::CellTreeBuilder	CellTree.h	/^class CellTreeBuilder$/;"	c	namespace:kvs
kvs::CellTreeBuilder::CellTreeBuilder	CellTree.cpp	/^CellTreeBuilder::CellTreeBuilder()$/;"	f	class:kvs::CellTreeBuilder	signature:()
kvs::CellTreeBuilder::CellTreeBuilder	CellTree.h	/^	CellTreeBuilder();$/;"	p	class:kvs::CellTreeBuilder	access:public	signature:()
kvs::CellTreeBuilder::build	CellTree.cpp	/^void CellTreeBuilder::build( CellTree& ct, const kvs::UnstructuredVolumeObject* ds )$/;"	f	class:kvs::CellTreeBuilder	signature:( CellTree& ct, const kvs::UnstructuredVolumeObject* ds )
kvs::CellTreeBuilder::build	CellTree.h	/^	void build( CellTree& ct, const kvs::UnstructuredVolumeObject* ds );$/;"	p	class:kvs::CellTreeBuilder	access:public	signature:( CellTree& ct, const kvs::UnstructuredVolumeObject* ds )
kvs::CellTreeBuilder::m_leafsize	CellTree.h	/^    unsigned int                        m_leafsize;$/;"	m	class:kvs::CellTreeBuilder	access:private
kvs::CellTreeBuilder::m_nodes	CellTree.h	/^    std::vector<kvs::CellTree::node>    m_nodes;$/;"	m	class:kvs::CellTreeBuilder	access:private
kvs::CellTreeBuilder::m_nodes1	CellTree.h	/^    std::vector<kvs::CellTree::node>    m_nodes1;$/;"	m	class:kvs::CellTreeBuilder	access:private
kvs::CellTreeBuilder::m_nodes2	CellTree.h	/^    std::vector<kvs::CellTree::node>    m_nodes2;$/;"	m	class:kvs::CellTreeBuilder	access:private
kvs::CellTreeBuilder::m_parallel	CellTree.h	/^    bool								m_parallel;$/;"	m	class:kvs::CellTreeBuilder	access:private
kvs::CellTreeBuilder::m_pc	CellTree.h	/^    per_cell*                           m_pc;$/;"	m	class:kvs::CellTreeBuilder	access:private
kvs::CellTreeBuilder::m_pc1	CellTree.h	/^    per_cell*                           m_pc1;$/;"	m	class:kvs::CellTreeBuilder	access:private
kvs::CellTreeBuilder::m_pc2	CellTree.h	/^    per_cell*                           m_pc2;$/;"	m	class:kvs::CellTreeBuilder	access:private
kvs::CellTreeBuilder::m_thread	CellTree.h	/^	kvs::SplitThread					m_thread[2];$/;"	m	class:kvs::CellTreeBuilder	access:private
kvs::CellTreeBuilder::setParallel	CellTree.cpp	/^void CellTreeBuilder::setParallel()$/;"	f	class:kvs::CellTreeBuilder	signature:()
kvs::CellTreeBuilder::setParallel	CellTree.h	/^	void setParallel();$/;"	p	class:kvs::CellTreeBuilder	access:public	signature:()
kvs::CellTreeBuilder::split	CellTree.cpp	/^void CellTreeBuilder::split( unsigned int index, float min[3], float max[3] )$/;"	f	class:kvs::CellTreeBuilder	signature:( unsigned int index, float min[3], float max[3] )
kvs::CellTreeBuilder::split	CellTree.h	/^	void split( unsigned int index, float min[3], float max[3] );$/;"	p	class:kvs::CellTreeBuilder	access:public	signature:( unsigned int index, float min[3], float max[3] )
kvs::CellTreeBuilder::~CellTreeBuilder	CellTree.cpp	/^CellTreeBuilder::~CellTreeBuilder()$/;"	f	class:kvs::CellTreeBuilder	signature:()
kvs::CellTreeBuilder::~CellTreeBuilder	CellTree.h	/^	~CellTreeBuilder();$/;"	p	class:kvs::CellTreeBuilder	access:public	signature:()
kvs::NullObject	NullObject.h	/^class NullObject : public kvs::ObjectBase$/;"	c	namespace:kvs	inherits:kvs::ObjectBase
kvs::NullObject::DownCast	NullObject.h	/^    static const kvs::NullObject* DownCast( const kvs::ObjectBase* object );$/;"	p	class:kvs::NullObject	access:public	signature:( const kvs::ObjectBase* object )
kvs::NullObject::DownCast	NullObject.h	/^    static kvs::NullObject* DownCast( kvs::ObjectBase* object );$/;"	p	class:kvs::NullObject	access:public	signature:( kvs::ObjectBase* object )
kvs::NullObject::NullObject	NullObject.h	/^    NullObject( const kvs::ObjectBase* object );$/;"	p	class:kvs::NullObject	access:public	signature:( const kvs::ObjectBase* object )
kvs::NullObject::NullObject	NullObject.h	/^    NullObject( const kvs::Vector3f& min_coord, const kvs::Vector3f& max_coord );$/;"	p	class:kvs::NullObject	access:public	signature:( const kvs::Vector3f& min_coord, const kvs::Vector3f& max_coord )
kvs::NullObject::NullObject	NullObject.h	/^    NullObject( void );$/;"	p	class:kvs::NullObject	access:public	signature:( void )
kvs::NullObject::deepCopy	NullObject.h	/^    void deepCopy( const NullObject& object );$/;"	p	class:kvs::NullObject	access:public	signature:( const NullObject& object )
kvs::NullObject::kvsClassName	NullObject.h	/^    kvsClassName( kvs::NullObject );$/;"	p	class:kvs::NullObject	access:private	signature:( kvs::NullObject )
kvs::NullObject::kvsModuleBaseClass	NullObject.h	/^    kvsModuleBaseClass( kvs::ObjectBase );$/;"	p	class:kvs::NullObject	access:private	signature:( kvs::ObjectBase )
kvs::NullObject::kvsModuleCategory	NullObject.h	/^    kvsModuleCategory( Object );$/;"	p	class:kvs::NullObject	access:private	signature:( Object )
kvs::NullObject::objectType	NullObject.h	/^    const ObjectType objectType( void ) const;$/;"	p	class:kvs::NullObject	access:public	signature:( void ) const
kvs::NullObject::shallowCopy	NullObject.h	/^    void shallowCopy( const NullObject& object );$/;"	p	class:kvs::NullObject	access:public	signature:( const NullObject& object )
kvs::NullObject::~NullObject	NullObject.h	/^    virtual ~NullObject( void );$/;"	p	class:kvs::NullObject	access:public	signature:( void )
kvs::PolygonToPolygon	PolygonToPolygon.h	/^class PolygonToPolygon : public kvs::FilterBase, public kvs::PolygonObject$/;"	c	namespace:kvs	inherits:kvs::FilterBase,kvs::PolygonObject
kvs::PolygonToPolygon::PolygonToPolygon	PolygonToPolygon.h	/^    PolygonToPolygon( const kvs::PolygonObject* object );$/;"	p	class:kvs::PolygonToPolygon	access:public	signature:( const kvs::PolygonObject* object )
kvs::PolygonToPolygon::PolygonToPolygon	PolygonToPolygon.h	/^    PolygonToPolygon( void );$/;"	p	class:kvs::PolygonToPolygon	access:public	signature:( void )
kvs::PolygonToPolygon::calculate_triangle_connections	PolygonToPolygon.h	/^    void calculate_triangle_connections( const kvs::PolygonObject* object );$/;"	p	class:kvs::PolygonToPolygon	access:private	signature:( const kvs::PolygonObject* object )
kvs::PolygonToPolygon::calculate_triangle_normals	PolygonToPolygon.h	/^    void calculate_triangle_normals( void );$/;"	p	class:kvs::PolygonToPolygon	access:private	signature:( void )
kvs::PolygonToPolygon::exec	PolygonToPolygon.h	/^    SuperClass* exec( const kvs::ObjectBase* object );$/;"	p	class:kvs::PolygonToPolygon	access:public	signature:( const kvs::ObjectBase* object )
kvs::PolygonToPolygon::kvsClassName	PolygonToPolygon.h	/^    kvsClassName( kvs::PolygonToPolygon );$/;"	p	class:kvs::PolygonToPolygon	access:private	signature:( kvs::PolygonToPolygon )
kvs::PolygonToPolygon::kvsModuleBaseClass	PolygonToPolygon.h	/^    kvsModuleBaseClass( kvs::FilterBase );$/;"	p	class:kvs::PolygonToPolygon	access:private	signature:( kvs::FilterBase )
kvs::PolygonToPolygon::kvsModuleCategory	PolygonToPolygon.h	/^    kvsModuleCategory( Filter );$/;"	p	class:kvs::PolygonToPolygon	access:private	signature:( Filter )
kvs::PolygonToPolygon::kvsModuleSuperClass	PolygonToPolygon.h	/^    kvsModuleSuperClass( kvs::PolygonObject );$/;"	p	class:kvs::PolygonToPolygon	access:private	signature:( kvs::PolygonObject )
kvs::PolygonToPolygon::~PolygonToPolygon	PolygonToPolygon.h	/^    virtual ~PolygonToPolygon( void );$/;"	p	class:kvs::PolygonToPolygon	access:public	signature:( void )
kvs::SPTDecompositionTable	SPTDecompositionTable.h	/^namespace SPTDecompositionTable$/;"	n	namespace:kvs
kvs::SplitThread	CellTree.h	/^class SplitThread : public kvs::Thread$/;"	c	namespace:kvs	inherits:kvs::Thread
kvs::SplitThread::SplitThread	CellTree.h	/^	SplitThread(){}$/;"	f	class:kvs::SplitThread	access:public	signature:()
kvs::SplitThread::check	CellTree.cpp	/^const bool SplitThread::check()$/;"	f	class:kvs::SplitThread	signature:()
kvs::SplitThread::check	CellTree.h	/^	const bool check();$/;"	p	class:kvs::SplitThread	access:public	signature:()
kvs::SplitThread::init	CellTree.cpp	/^void SplitThread::init( $/;"	f	class:kvs::SplitThread	signature:( unsigned int leafsize, std::vector<CellTree::node>* p_nodes, per_cell* pc, unsigned int index, float min[3], float max[3] )
kvs::SplitThread::init	CellTree.h	/^	void init($/;"	p	class:kvs::SplitThread	access:public	signature:( unsigned int leafsize, std::vector<CellTree::node>* p_nodes, per_cell* pc, unsigned int index, float min[3], float max[3] )
kvs::SplitThread::m_index	CellTree.h	/^	unsigned int					m_index;$/;"	m	class:kvs::SplitThread	access:private
kvs::SplitThread::m_leafsize	CellTree.h	/^    unsigned int                    m_leafsize;$/;"	m	class:kvs::SplitThread	access:private
kvs::SplitThread::m_max	CellTree.h	/^	float							m_max[3];$/;"	m	class:kvs::SplitThread	access:private
kvs::SplitThread::m_min	CellTree.h	/^	float							m_min[3];$/;"	m	class:kvs::SplitThread	access:private
kvs::SplitThread::m_nodes	CellTree.h	/^	std::vector<CellTree::node>*	m_nodes;$/;"	m	class:kvs::SplitThread	access:private
kvs::SplitThread::m_pc	CellTree.h	/^    per_cell*                       m_pc;$/;"	m	class:kvs::SplitThread	access:private
kvs::SplitThread::run	CellTree.cpp	/^void SplitThread::run()$/;"	f	class:kvs::SplitThread	signature:()
kvs::SplitThread::run	CellTree.h	/^	void run();$/;"	p	class:kvs::SplitThread	access:public	signature:()
kvs::SplitThread::split	CellTree.cpp	/^void SplitThread::split( unsigned int index, float min[3], float max[3] )$/;"	f	class:kvs::SplitThread	signature:( unsigned int index, float min[3], float max[3] )
kvs::SplitThread::split	CellTree.h	/^	void split( unsigned int index, float min[3], float max[3] );$/;"	p	class:kvs::SplitThread	access:public	signature:( unsigned int index, float min[3], float max[3] )
kvs::SplitThread::~SplitThread	CellTree.h	/^	~SplitThread(){}$/;"	f	class:kvs::SplitThread	access:public	signature:()
kvs::allocate	CellTree.cpp	/^        mask.allocate( node_size );$/;"	p	file:	signature:( node_size )
kvs::b	CellTree.cpp	/^        bucket b[3][nbuckets];     \/\/3 dimensions, 6 buckets each$/;"	l
kvs::b	CellTree.cpp	/^    bucket b[3][nbuckets]; \/\/3 dimensions, 6 buckets each$/;"	l
kvs::bd	CellLocator.cpp	/^    kvs::BoundingBox bd(m_dataset, cellid);$/;"	p	file:	signature:(m_dataset, cellid)
kvs::bd	CellTree.cpp	/^        kvs::BoundingBox bd( ds, i );$/;"	p	file:	signature:( ds, i )
kvs::begin	CellLocatorBIH.cpp	/^            const unsigned int* begin = &(this->m_celltree->leaves[n->start()]);$/;"	l
kvs::begin	CellTree.cpp	/^        per_cell* begin = m_pc + start;$/;"	l
kvs::bindCell	CellLocator.cpp	/^    m_cell->bindCell( cellid );$/;"	p	file:	signature:( cellid )
kvs::bounds	CellLocator.cpp	/^    const float* bounds = bd.bounds();$/;"	l
kvs::bounds	CellTree.cpp	/^        const float* bounds = bd.bounds();$/;"	l
kvs::c	CellTree.cpp	/^                float c = lvol*sum + rvol*(size-sum);$/;"	l
kvs::c	CellTree.cpp	/^            float c = lvol*sum + rvol*(size-sum);$/;"	l
kvs::cen	CellTree.cpp	/^                float cen = (pc->min[d] + pc->max[d])\/2.0f;	\/\/center of a certain dimension$/;"	l
kvs::cen	CellTree.cpp	/^            float cen = (pc->min[d] + pc->max[d])\/2.0f;	\/\/center of a certain dimension$/;"	l
kvs::center	CellLocator.cpp	/^    kvs::Vector3f center;$/;"	l
kvs::child	CellTree.cpp	/^    kvs::CellTree::node child[2];$/;"	l
kvs::clear	CellTree.cpp	/^	m_nodes.clear();$/;"	p	file:	signature:()
kvs::clear	CellTree.cpp	/^	m_nodes1.clear();$/;"	p	file:	signature:()
kvs::clear	CellTree.cpp	/^	m_nodes2.clear();$/;"	p	file:	signature:()
kvs::clip	CellTree.cpp	/^        float clip[2] = { lmax[dim], rmin[dim] };$/;"	l
kvs::clip	CellTree.cpp	/^    float clip[2] = { lmax[dim], rmin[dim] };$/;"	l
kvs::close	CellLocatorBIH.cpp	/^    outfile.close();$/;"	p	file:	signature:()
kvs::cost	CellTree.cpp	/^        float cost = std::numeric_limits<float>::max();$/;"	l
kvs::cost	CellTree.cpp	/^    float cost = std::numeric_limits<float>::max();$/;"	l
kvs::ct	CellLocatorBIH.cpp	/^    kvs::CellTree* ct = new kvs::CellTree();$/;"	l
kvs::dim	CellTree.cpp	/^        unsigned int dim;$/;"	l
kvs::dim	CellTree.cpp	/^    unsigned int dim;$/;"	l
kvs::end	CellLocatorBIH.cpp	/^            const unsigned int* end   = begin + n->size();$/;"	l
kvs::end	CellTree.cpp	/^        per_cell* end   = m_pc + start + size;$/;"	l
kvs::end	CellTree.cpp	/^    per_cell* end   = m_pc + start + size;$/;"	l
kvs::ext	CellTree.cpp	/^        const float ext[3] = { max[0]-min[0], max[1]-min[1], max[2]-min[2] }; $/;"	l
kvs::ext	CellTree.cpp	/^    const float ext[3] = { max[0]-min[0], max[1]-min[1], max[2]-min[2] }; $/;"	l
kvs::glew	PreIntegrationTable.h	/^namespace glew$/;"	n	namespace:kvs
kvs::glew	StochasticLineRenderer.h	/^namespace glew$/;"	n	namespace:kvs
kvs::glew	StochasticPointRenderer.h	/^namespace glew$/;"	n	namespace:kvs
kvs::glew	StochasticPolygonRenderer.h	/^namespace glew$/;"	n	namespace:kvs
kvs::glew	StochasticRenderer.h	/^namespace glew$/;"	n	namespace:kvs
kvs::glew	StochasticRendererBase.h	/^namespace glew$/;"	n	namespace:kvs
kvs::glew	StochasticVolumeRenderer.h	/^namespace glew$/;"	n	namespace:kvs
kvs::glew::PreIntegrationTable	PreIntegrationTable.h	/^class PreIntegrationTable$/;"	c	namespace:kvs::glew
kvs::glew::PreIntegrationTable::PreIntegrationTable	PreIntegrationTable.h	/^    PreIntegrationTable( const int size_scalar, const int size_depth );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( const int size_scalar, const int size_depth )
kvs::glew::PreIntegrationTable::PreIntegrationTable	PreIntegrationTable.h	/^    PreIntegrationTable( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
kvs::glew::PreIntegrationTable::bind	PreIntegrationTable.h	/^    void bind( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
kvs::glew::PreIntegrationTable::compute_exact_level	PreIntegrationTable.h	/^    void compute_exact_level( const int level, const float dl );$/;"	p	class:kvs::glew::PreIntegrationTable	access:private	signature:( const int level, const float dl )
kvs::glew::PreIntegrationTable::compute_incremental_level	PreIntegrationTable.h	/^    void compute_incremental_level($/;"	p	class:kvs::glew::PreIntegrationTable	access:private	signature:( const int current_level, const int previous_level, const int first_level, const float l, const float dl )
kvs::glew::PreIntegrationTable::create	PreIntegrationTable.h	/^    void create( const float max_edge_length );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( const float max_edge_length )
kvs::glew::PreIntegrationTable::download	PreIntegrationTable.h	/^    void download( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
kvs::glew::PreIntegrationTable::isDownloaded	PreIntegrationTable.h	/^    const bool isDownloaded( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
kvs::glew::PreIntegrationTable::isTexture	PreIntegrationTable.h	/^    const bool isTexture( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
kvs::glew::PreIntegrationTable::kvsClassName_without_virtual	PreIntegrationTable.h	/^    kvsClassName_without_virtual( PreIntegrationTable );$/;"	p	class:kvs::glew::PreIntegrationTable	access:private	signature:( PreIntegrationTable )
kvs::glew::PreIntegrationTable::m_size_depth	PreIntegrationTable.h	/^    int                  m_size_depth;    \/\/\/< table size for the depth axis$/;"	m	class:kvs::glew::PreIntegrationTable	access:protected
kvs::glew::PreIntegrationTable::m_size_scalar	PreIntegrationTable.h	/^    int                  m_size_scalar;   \/\/\/< table size for the scalar axis$/;"	m	class:kvs::glew::PreIntegrationTable	access:protected
kvs::glew::PreIntegrationTable::m_table	PreIntegrationTable.h	/^    kvs::Vector4f*       m_table;         \/\/\/< pre-integration table$/;"	m	class:kvs::glew::PreIntegrationTable	access:protected
kvs::glew::PreIntegrationTable::m_table_texture	PreIntegrationTable.h	/^    kvs::glew::Texture3D m_table_texture; \/\/\/< pre-integration table texture$/;"	m	class:kvs::glew::PreIntegrationTable	access:protected
kvs::glew::PreIntegrationTable::m_transfer_function	PreIntegrationTable.h	/^    kvs::Vector4f*       m_transfer_function; \/\/\/< transfer function data$/;"	m	class:kvs::glew::PreIntegrationTable	access:protected
kvs::glew::PreIntegrationTable::release	PreIntegrationTable.h	/^    void release( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
kvs::glew::PreIntegrationTable::setTableSize	PreIntegrationTable.h	/^    void setTableSize( const int size_scalar, const int size_depth );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( const int size_scalar, const int size_depth )
kvs::glew::PreIntegrationTable::setTransferFunction	PreIntegrationTable.h	/^    void setTransferFunction($/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( const kvs::TransferFunction& transfer_function, const float min_scalar, const float max_scalar )
kvs::glew::PreIntegrationTable::sizeDepth	PreIntegrationTable.h	/^    const int sizeDepth( void ) const;$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void ) const
kvs::glew::PreIntegrationTable::unbind	PreIntegrationTable.h	/^    void unbind( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
kvs::glew::PreIntegrationTable::~PreIntegrationTable	PreIntegrationTable.h	/^    ~PreIntegrationTable( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
kvs::glew::StochasticLineRenderer	StochasticLineRenderer.h	/^class StochasticLineRenderer : public kvs::glew::StochasticRendererBase$/;"	c	namespace:kvs::glew	inherits:kvs::glew::StochasticRendererBase
kvs::glew::StochasticLineRenderer::ColorType	StochasticLineRenderer.h	/^    typedef GLubyte  ColorType;$/;"	t	class:kvs::glew::StochasticLineRenderer	access:protected
kvs::glew::StochasticLineRenderer::ConnectType	StochasticLineRenderer.h	/^    typedef GLuint   ConnectType;$/;"	t	class:kvs::glew::StochasticLineRenderer	access:protected
kvs::glew::StochasticLineRenderer::CoordType	StochasticLineRenderer.h	/^    typedef GLfloat  CoordType;$/;"	t	class:kvs::glew::StochasticLineRenderer	access:protected
kvs::glew::StochasticLineRenderer::IndexType	StochasticLineRenderer.h	/^    typedef GLushort IndexType;$/;"	t	class:kvs::glew::StochasticLineRenderer	access:protected
kvs::glew::StochasticLineRenderer::StochasticLineRenderer	StochasticLineRenderer.h	/^    StochasticLineRenderer( kvs::LineObject* line );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( kvs::LineObject* line )
kvs::glew::StochasticLineRenderer::StochasticLineRenderer	StochasticLineRenderer.h	/^    StochasticLineRenderer( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
kvs::glew::StochasticLineRenderer::attachLineObject	StochasticLineRenderer.h	/^    void attachLineObject( kvs::LineObject* line );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( kvs::LineObject* line )
kvs::glew::StochasticLineRenderer::attachObject	StochasticLineRenderer.h	/^    void attachObject( kvs::ObjectBase* object );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( kvs::ObjectBase* object )
kvs::glew::StochasticLineRenderer::clearEnsembleBuffer	StochasticLineRenderer.h	/^    void clearEnsembleBuffer( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
kvs::glew::StochasticLineRenderer::createVertexBuffer	StochasticLineRenderer.h	/^    void createVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
kvs::glew::StochasticLineRenderer::downloadVertexBuffer	StochasticLineRenderer.h	/^    void downloadVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
kvs::glew::StochasticLineRenderer::drawVertexBuffer	StochasticLineRenderer.h	/^    void drawVertexBuffer( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( const float modelview_matrix[16] )
kvs::glew::StochasticLineRenderer::exec	StochasticLineRenderer.h	/^    void exec( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light )
kvs::glew::StochasticLineRenderer::initialize	StochasticLineRenderer.h	/^    void initialize( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
kvs::glew::StochasticLineRenderer::initializeShader	StochasticLineRenderer.h	/^    void initializeShader( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
kvs::glew::StochasticLineRenderer::kvsClassName	StochasticLineRenderer.h	/^    kvsClassName( kvs::glew::StochasticLineRenderer );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:private	signature:( kvs::glew::StochasticLineRenderer )
kvs::glew::StochasticLineRenderer::kvsModuleBaseClass	StochasticLineRenderer.h	/^    kvsModuleBaseClass( kvs::glew::StochasticRendererBase );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:private	signature:( kvs::glew::StochasticRendererBase )
kvs::glew::StochasticLineRenderer::kvsModuleCategory	StochasticLineRenderer.h	/^    kvsModuleCategory( Renderer );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:private	signature:( Renderer )
kvs::glew::StochasticLineRenderer::m_ibo	StochasticLineRenderer.h	/^    kvs::glew::IndexBufferObject    m_ibo;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
kvs::glew::StochasticLineRenderer::m_line_opacity	StochasticLineRenderer.h	/^    float   m_line_opacity;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
kvs::glew::StochasticLineRenderer::m_loc_identifier	StochasticLineRenderer.h	/^    size_t  m_loc_identifier; \/\/\/< loc indectifier$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
kvs::glew::StochasticLineRenderer::m_off_color	StochasticLineRenderer.h	/^    size_t  m_off_color;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
kvs::glew::StochasticLineRenderer::m_off_coord	StochasticLineRenderer.h	/^    size_t  m_off_coord;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
kvs::glew::StochasticLineRenderer::m_off_index	StochasticLineRenderer.h	/^    size_t  m_off_index;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
kvs::glew::StochasticLineRenderer::m_ref_line	StochasticLineRenderer.h	/^    kvs::LineObject* m_ref_line;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
kvs::glew::StochasticLineRenderer::m_vbo	StochasticLineRenderer.h	/^    kvs::glew::VertexBufferObject   m_vbo;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
kvs::glew::StochasticLineRenderer::object	StochasticLineRenderer.h	/^    kvs::ObjectBase* object( void ) const;$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void ) const
kvs::glew::StochasticLineRenderer::rendererType	StochasticLineRenderer.h	/^    const RendererType rendererType( void ) const;$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void ) const
kvs::glew::StochasticLineRenderer::setOpacity	StochasticLineRenderer.h	/^    void setOpacity( const unsigned char opacity );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( const unsigned char opacity )
kvs::glew::StochasticLineRenderer::setup_shader	StochasticLineRenderer.h	/^    void setup_shader( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:private	signature:( const float modelview_matrix[16] )
kvs::glew::StochasticLineRenderer::~StochasticLineRenderer	StochasticLineRenderer.h	/^    virtual ~StochasticLineRenderer( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
kvs::glew::StochasticPointRenderer	StochasticPointRenderer.h	/^class StochasticPointRenderer : public kvs::glew::StochasticRendererBase$/;"	c	namespace:kvs::glew	inherits:kvs::glew::StochasticRendererBase
kvs::glew::StochasticPointRenderer::ColorType	StochasticPointRenderer.h	/^    typedef GLubyte  ColorType;$/;"	t	class:kvs::glew::StochasticPointRenderer	access:protected
kvs::glew::StochasticPointRenderer::CoordType	StochasticPointRenderer.h	/^    typedef GLfloat  CoordType;$/;"	t	class:kvs::glew::StochasticPointRenderer	access:protected
kvs::glew::StochasticPointRenderer::IndexType	StochasticPointRenderer.h	/^    typedef GLushort IndexType;$/;"	t	class:kvs::glew::StochasticPointRenderer	access:protected
kvs::glew::StochasticPointRenderer::NormalType	StochasticPointRenderer.h	/^    typedef GLbyte   NormalType;$/;"	t	class:kvs::glew::StochasticPointRenderer	access:protected
kvs::glew::StochasticPointRenderer::Particles	StochasticPointRenderer.h	/^class StochasticPointRenderer::Particles$/;"	c	class:kvs::glew::StochasticPointRenderer
kvs::glew::StochasticPointRenderer::Particles::Particles	StochasticPointRenderer.h	/^    Particles( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::Particles::byteSize	StochasticPointRenderer.h	/^    const size_t byteSize( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
kvs::glew::StochasticPointRenderer::Particles::byteSizePerVertex	StochasticPointRenderer.h	/^    const size_t byteSizePerVertex( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
kvs::glew::StochasticPointRenderer::Particles::colors	StochasticPointRenderer.h	/^    StochasticPointRenderer::ColorType* colors( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::Particles::colors	StochasticPointRenderer.h	/^    const StochasticPointRenderer::ColorType* colors( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
kvs::glew::StochasticPointRenderer::Particles::coords	StochasticPointRenderer.h	/^    StochasticPointRenderer::CoordType* coords( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::Particles::coords	StochasticPointRenderer.h	/^    const StochasticPointRenderer::CoordType* coords( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
kvs::glew::StochasticPointRenderer::Particles::create	StochasticPointRenderer.h	/^    void create( const size_t nvertices, const bool has_normal );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( const size_t nvertices, const bool has_normal )
kvs::glew::StochasticPointRenderer::Particles::hasNormal	StochasticPointRenderer.h	/^    const bool hasNormal( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
kvs::glew::StochasticPointRenderer::Particles::indices	StochasticPointRenderer.h	/^    StochasticPointRenderer::IndexType* indices( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::Particles::indices	StochasticPointRenderer.h	/^    const StochasticPointRenderer::IndexType* indices( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
kvs::glew::StochasticPointRenderer::Particles::m_colors	StochasticPointRenderer.h	/^    StochasticPointRenderer::ColorType* m_colors; \/\/\/< color value array$/;"	m	class:kvs::glew::StochasticPointRenderer::Particles	access:private
kvs::glew::StochasticPointRenderer::Particles::m_coords	StochasticPointRenderer.h	/^    StochasticPointRenderer::CoordType* m_coords; \/\/\/< coordinate value array$/;"	m	class:kvs::glew::StochasticPointRenderer::Particles	access:private
kvs::glew::StochasticPointRenderer::Particles::m_indices	StochasticPointRenderer.h	/^    StochasticPointRenderer::IndexType* m_indices; \/\/\/< index array$/;"	m	class:kvs::glew::StochasticPointRenderer::Particles	access:private
kvs::glew::StochasticPointRenderer::Particles::m_normals	StochasticPointRenderer.h	/^    StochasticPointRenderer::NormalType* m_normals; \/\/\/< normal vector array$/;"	m	class:kvs::glew::StochasticPointRenderer::Particles	access:private
kvs::glew::StochasticPointRenderer::Particles::m_nvertices	StochasticPointRenderer.h	/^    size_t m_nvertices; \/\/\/< number of vertices$/;"	m	class:kvs::glew::StochasticPointRenderer::Particles	access:private
kvs::glew::StochasticPointRenderer::Particles::normals	StochasticPointRenderer.h	/^    StochasticPointRenderer::NormalType* normals( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::Particles::normals	StochasticPointRenderer.h	/^    const StochasticPointRenderer::NormalType* normals( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
kvs::glew::StochasticPointRenderer::Particles::nvertices	StochasticPointRenderer.h	/^    const size_t nvertices( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
kvs::glew::StochasticPointRenderer::Particles::release	StochasticPointRenderer.h	/^    void release( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::Particles::~Particles	StochasticPointRenderer.h	/^    ~Particles( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::Renderer	StochasticPointRenderer.h	/^class StochasticPointRenderer::Renderer$/;"	c	class:kvs::glew::StochasticPointRenderer
kvs::glew::StochasticPointRenderer::Renderer::Renderer	StochasticPointRenderer.h	/^    Renderer( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Renderer	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::Renderer::download	StochasticPointRenderer.h	/^    const bool download( kvs::glew::VertexBufferObject& vbo );$/;"	p	class:kvs::glew::StochasticPointRenderer::Renderer	access:public	signature:( kvs::glew::VertexBufferObject& vbo )
kvs::glew::StochasticPointRenderer::Renderer::draw	StochasticPointRenderer.h	/^    void draw( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Renderer	access:public	signature:( void ) const
kvs::glew::StochasticPointRenderer::Renderer::m_count	StochasticPointRenderer.h	/^    size_t  m_count; \/\/\/< number of vertices$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
kvs::glew::StochasticPointRenderer::Renderer::m_loc_identifier	StochasticPointRenderer.h	/^    size_t  m_loc_identifier; \/\/\/< $/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
kvs::glew::StochasticPointRenderer::Renderer::m_off_color	StochasticPointRenderer.h	/^    size_t  m_off_color; \/\/\/< offset bytes for the color value array$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
kvs::glew::StochasticPointRenderer::Renderer::m_off_coord	StochasticPointRenderer.h	/^    size_t  m_off_coord; \/\/\/< offset bytes for the coodinate value array$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
kvs::glew::StochasticPointRenderer::Renderer::m_off_index	StochasticPointRenderer.h	/^    size_t  m_off_index; \/\/\/< offset bytes for the index array$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
kvs::glew::StochasticPointRenderer::Renderer::m_off_normal	StochasticPointRenderer.h	/^    size_t  m_off_normal; \/\/\/< offset bytes for the normal vector array$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
kvs::glew::StochasticPointRenderer::Renderer::m_particles	StochasticPointRenderer.h	/^    const StochasticPointRenderer::Particles*  m_particles; \/\/< pointer to the particles$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
kvs::glew::StochasticPointRenderer::Renderer::m_start	StochasticPointRenderer.h	/^    size_t  m_start; \/\/\/< start number of input vertices$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
kvs::glew::StochasticPointRenderer::Renderer::set	StochasticPointRenderer.h	/^    void set($/;"	p	class:kvs::glew::StochasticPointRenderer::Renderer	access:public	signature:( const StochasticPointRenderer::Particles* particles, const size_t start, const size_t count, const size_t loc_identifier )
kvs::glew::StochasticPointRenderer::StochasticPointRenderer	StochasticPointRenderer.h	/^    StochasticPointRenderer( kvs::PointObject* point, const size_t repeat_level = 1 );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( kvs::PointObject* point, const size_t repeat_level = 1 )
kvs::glew::StochasticPointRenderer::StochasticPointRenderer	StochasticPointRenderer.h	/^    StochasticPointRenderer( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::attachObject	StochasticPointRenderer.h	/^    void attachObject( kvs::ObjectBase* object );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( kvs::ObjectBase* object )
kvs::glew::StochasticPointRenderer::attachPointObject	StochasticPointRenderer.h	/^    void attachPointObject( kvs::PointObject* point );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( kvs::PointObject* point )
kvs::glew::StochasticPointRenderer::calculate_zooming_factor	StochasticPointRenderer.h	/^    void calculate_zooming_factor( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:private	signature:( void )
kvs::glew::StochasticPointRenderer::clearEnsembleBuffer	StochasticPointRenderer.h	/^    void clearEnsembleBuffer( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::createVertexBuffer	StochasticPointRenderer.h	/^    void createVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::create_vertexbuffer_from_point	StochasticPointRenderer.h	/^    void create_vertexbuffer_from_point( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:private	signature:( void )
kvs::glew::StochasticPointRenderer::downloadVertexBuffer	StochasticPointRenderer.h	/^    void downloadVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::drawVertexBuffer	StochasticPointRenderer.h	/^    void drawVertexBuffer( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( const float modelview_matrix[16] )
kvs::glew::StochasticPointRenderer::exec	StochasticPointRenderer.h	/^    void exec( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light )
kvs::glew::StochasticPointRenderer::initialize	StochasticPointRenderer.h	/^    void initialize( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::initializeShader	StochasticPointRenderer.h	/^    void initializeShader( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
kvs::glew::StochasticPointRenderer::kvsClassName	StochasticPointRenderer.h	/^    kvsClassName( kvs::glew::StochasticPointRenderer );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:private	signature:( kvs::glew::StochasticPointRenderer )
kvs::glew::StochasticPointRenderer::kvsModuleBaseClass	StochasticPointRenderer.h	/^    kvsModuleBaseClass( kvs::glew::StochasticRendererBase );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:private	signature:( kvs::glew::StochasticRendererBase )
kvs::glew::StochasticPointRenderer::kvsModuleCategory	StochasticPointRenderer.h	/^    kvsModuleCategory( Renderer );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:private	signature:( Renderer )
kvs::glew::StochasticPointRenderer::m_circle_threshold	StochasticPointRenderer.h	/^    size_t  m_circle_threshold; \/\/\/< threshold for the shape of the particle$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
kvs::glew::StochasticPointRenderer::m_loc_identifier	StochasticPointRenderer.h	/^    size_t      m_loc_identifier; \/\/\/< loc indectifier$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
kvs::glew::StochasticPointRenderer::m_particles	StochasticPointRenderer.h	/^    Particles*  m_particles;$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
kvs::glew::StochasticPointRenderer::m_point_size	StochasticPointRenderer.h	/^    float   m_point_size;$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
kvs::glew::StochasticPointRenderer::m_ref_particle	StochasticPointRenderer.h	/^    kvs::PointObject*   m_ref_particle;$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
kvs::glew::StochasticPointRenderer::m_renderer	StochasticPointRenderer.h	/^    Renderer*   m_renderer;$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
kvs::glew::StochasticPointRenderer::m_vbo	StochasticPointRenderer.h	/^    kvs::glew::VertexBufferObject* m_vbo; \/\/\/< vertex buffer object (VBO) for the volume$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
kvs::glew::StochasticPointRenderer::m_zooming_factor	StochasticPointRenderer.h	/^    float   m_zooming_factor; \/\/\/< zooming factor$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
kvs::glew::StochasticPointRenderer::object	StochasticPointRenderer.h	/^    kvs::ObjectBase* object( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void ) const
kvs::glew::StochasticPointRenderer::rendererType	StochasticPointRenderer.h	/^    const RendererType rendererType( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void ) const
kvs::glew::StochasticPointRenderer::setPointSize	StochasticPointRenderer.h	/^    void setPointSize( const float point_size );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( const float point_size )
kvs::glew::StochasticPointRenderer::setup_shader	StochasticPointRenderer.h	/^    void setup_shader( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:private	signature:( const float modelview_matrix[16] )
kvs::glew::StochasticPointRenderer::~StochasticPointRenderer	StochasticPointRenderer.h	/^    virtual ~StochasticPointRenderer( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
kvs::glew::StochasticPolygonRenderer	StochasticPolygonRenderer.h	/^class StochasticPolygonRenderer : public kvs::glew::StochasticRendererBase$/;"	c	namespace:kvs::glew	inherits:kvs::glew::StochasticRendererBase
kvs::glew::StochasticPolygonRenderer::ColorType	StochasticPolygonRenderer.h	/^    typedef GLubyte  ColorType;$/;"	t	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::ConnectType	StochasticPolygonRenderer.h	/^    typedef GLuint   ConnectType;$/;"	t	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::CoordType	StochasticPolygonRenderer.h	/^    typedef GLfloat  CoordType;$/;"	t	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::IndexType	StochasticPolygonRenderer.h	/^    typedef GLushort IndexType;$/;"	t	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::NormalType	StochasticPolygonRenderer.h	/^    typedef GLbyte   NormalType;$/;"	t	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::StochasticPolygonRenderer	StochasticPolygonRenderer.h	/^    StochasticPolygonRenderer( kvs::PolygonObject* polygon );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( kvs::PolygonObject* polygon )
kvs::glew::StochasticPolygonRenderer::StochasticPolygonRenderer	StochasticPolygonRenderer.h	/^    StochasticPolygonRenderer( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
kvs::glew::StochasticPolygonRenderer::attachObject	StochasticPolygonRenderer.h	/^    void attachObject( kvs::ObjectBase* object );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( kvs::ObjectBase* object )
kvs::glew::StochasticPolygonRenderer::attachPolygonObject	StochasticPolygonRenderer.h	/^    void attachPolygonObject( kvs::PolygonObject* polygon );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( kvs::PolygonObject* polygon )
kvs::glew::StochasticPolygonRenderer::clearEnsembleBuffer	StochasticPolygonRenderer.h	/^    void clearEnsembleBuffer( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
kvs::glew::StochasticPolygonRenderer::createVertexBuffer	StochasticPolygonRenderer.h	/^    void createVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
kvs::glew::StochasticPolygonRenderer::downloadVertexBuffer	StochasticPolygonRenderer.h	/^    void downloadVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
kvs::glew::StochasticPolygonRenderer::drawVertexBuffer	StochasticPolygonRenderer.h	/^    void drawVertexBuffer( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( const float modelview_matrix[16] )
kvs::glew::StochasticPolygonRenderer::exec	StochasticPolygonRenderer.h	/^    void exec( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light )
kvs::glew::StochasticPolygonRenderer::initialize	StochasticPolygonRenderer.h	/^    void initialize( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
kvs::glew::StochasticPolygonRenderer::initializeShader	StochasticPolygonRenderer.h	/^    void initializeShader( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
kvs::glew::StochasticPolygonRenderer::kvsClassName	StochasticPolygonRenderer.h	/^    kvsClassName( kvs::glew::StochasticPolygonRenderer );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:private	signature:( kvs::glew::StochasticPolygonRenderer )
kvs::glew::StochasticPolygonRenderer::kvsModuleBaseClass	StochasticPolygonRenderer.h	/^    kvsModuleBaseClass( kvs::glew::StochasticRendererBase );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:private	signature:( kvs::glew::StochasticRendererBase )
kvs::glew::StochasticPolygonRenderer::kvsModuleCategory	StochasticPolygonRenderer.h	/^    kvsModuleCategory( Renderer );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:private	signature:( Renderer )
kvs::glew::StochasticPolygonRenderer::m_ibo	StochasticPolygonRenderer.h	/^    kvs::glew::IndexBufferObject    m_ibo;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::m_loc_identifier	StochasticPolygonRenderer.h	/^    size_t  m_loc_identifier; \/\/\/< loc indectifier$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::m_off_color	StochasticPolygonRenderer.h	/^    size_t  m_off_color;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::m_off_coord	StochasticPolygonRenderer.h	/^    size_t  m_off_coord;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::m_off_index	StochasticPolygonRenderer.h	/^    size_t  m_off_index;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::m_off_normal	StochasticPolygonRenderer.h	/^    size_t  m_off_normal;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::m_polygon_offset	StochasticPolygonRenderer.h	/^    float   m_polygon_offset;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::m_ref_polygon	StochasticPolygonRenderer.h	/^    kvs::PolygonObject* m_ref_polygon;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::m_vbo	StochasticPolygonRenderer.h	/^    kvs::glew::VertexBufferObject   m_vbo;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
kvs::glew::StochasticPolygonRenderer::object	StochasticPolygonRenderer.h	/^    kvs::ObjectBase* object( void ) const;$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void ) const
kvs::glew::StochasticPolygonRenderer::rendererType	StochasticPolygonRenderer.h	/^    const RendererType rendererType( void ) const;$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void ) const
kvs::glew::StochasticPolygonRenderer::setPolygonOffset	StochasticPolygonRenderer.h	/^    void setPolygonOffset( const float polygon_offset );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( const float polygon_offset )
kvs::glew::StochasticPolygonRenderer::setup_shader	StochasticPolygonRenderer.h	/^    void setup_shader( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:private	signature:( const float modelview_matrix[16] )
kvs::glew::StochasticPolygonRenderer::~StochasticPolygonRenderer	StochasticPolygonRenderer.h	/^    virtual ~StochasticPolygonRenderer( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
kvs::glew::StochasticRenderer	StochasticRenderer.h	/^class StochasticRenderer : public kvs::RendererBase$/;"	c	namespace:kvs::glew	inherits:kvs::RendererBase
kvs::glew::StochasticRenderer::RendererList	StochasticRenderer.h	/^    typedef std::vector<kvs::glew::StochasticRendererBase*> RendererList;$/;"	t	class:kvs::glew::StochasticRenderer	access:public
kvs::glew::StochasticRenderer::StochasticRenderer	StochasticRenderer.h	/^    StochasticRenderer( const size_t repeat_level = 1 );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( const size_t repeat_level = 1 )
kvs::glew::StochasticRenderer::StochasticRenderer	StochasticRenderer.h	/^    StochasticRenderer( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( void )
kvs::glew::StochasticRenderer::changeObject	StochasticRenderer.h	/^    void changeObject($/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( kvs::ObjectBase* object, kvs::glew::StochasticRendererBase* renderer, const bool is_delete = true )
kvs::glew::StochasticRenderer::clear	StochasticRenderer.h	/^    void clear( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( void )
kvs::glew::StochasticRenderer::clearEnsembleBuffer	StochasticRenderer.h	/^    void clearEnsembleBuffer( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( void )
kvs::glew::StochasticRenderer::create_image	StochasticRenderer.h	/^    void create_image( const kvs::Camera* camera, const kvs::Light* light );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( const kvs::Camera* camera, const kvs::Light* light )
kvs::glew::StochasticRenderer::create_texture	StochasticRenderer.h	/^    void create_texture($/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( kvs::Texture2D& texture, kvs::glew::FrameBufferObject& framebuffer, GLint internal_format, GLenum external_format, GLenum external_type, GLenum attachment )
kvs::glew::StochasticRenderer::disableLODControl	StochasticRenderer.h	/^    void disableLODControl( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( void )
kvs::glew::StochasticRenderer::enableLODControl	StochasticRenderer.h	/^    void enableLODControl( const size_t coarse_level = 1 );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( const size_t coarse_level = 1 )
kvs::glew::StochasticRenderer::exec	StochasticRenderer.h	/^    void exec( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light )
kvs::glew::StochasticRenderer::initialize	StochasticRenderer.h	/^    void initialize( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( void )
kvs::glew::StochasticRenderer::initialize_framebuffer_texture	StochasticRenderer.h	/^    void initialize_framebuffer_texture( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( void )
kvs::glew::StochasticRenderer::initialize_opengl	StochasticRenderer.h	/^    void initialize_opengl( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( void )
kvs::glew::StochasticRenderer::initialize_random_texture	StochasticRenderer.h	/^    void initialize_random_texture( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( void )
kvs::glew::StochasticRenderer::kvsClassName	StochasticRenderer.h	/^    kvsClassName( kvs::glew::StochasticRenderer );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( kvs::glew::StochasticRenderer )
kvs::glew::StochasticRenderer::kvsModuleBaseClass	StochasticRenderer.h	/^    kvsModuleBaseClass( kvs::RendererBase );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( kvs::RendererBase )
kvs::glew::StochasticRenderer::kvsModuleCategory	StochasticRenderer.h	/^    kvsModuleCategory( Renderer );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( Renderer )
kvs::glew::StochasticRenderer::m_clear_ensemble_buffer	StochasticRenderer.h	/^    bool    m_clear_ensemble_buffer;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::m_coarse_level	StochasticRenderer.h	/^    size_t      m_coarse_level;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::m_color_texture	StochasticRenderer.h	/^    kvs::Texture2D                      m_color_texture;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::m_depth_texture	StochasticRenderer.h	/^    kvs::Texture2D                      m_depth_texture;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::m_enable_lod	StochasticRenderer.h	/^    bool    m_enable_lod;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::m_ensemble_buffer	StochasticRenderer.h	/^    kvs::glew::EnsembleAverageBuffer    m_ensemble_buffer;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::m_framebuffer	StochasticRenderer.h	/^    kvs::glew::FrameBufferObject        m_framebuffer;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::m_height	StochasticRenderer.h	/^    size_t      m_height;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::m_modelview_matrix	StochasticRenderer.h	/^    float   m_modelview_matrix[16];$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::m_random_texture	StochasticRenderer.h	/^    kvs::Texture2D  m_random_texture;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::m_random_texture_size	StochasticRenderer.h	/^    size_t          m_random_texture_size;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::m_renderer_list	StochasticRenderer.h	/^    RendererList    m_renderer_list;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::m_repeat_level	StochasticRenderer.h	/^    size_t      m_repeat_level;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::m_width	StochasticRenderer.h	/^    size_t      m_width;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
kvs::glew::StochasticRenderer::registerRenderer	StochasticRenderer.h	/^    void registerRenderer( kvs::glew::StochasticRendererBase* renderer );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( kvs::glew::StochasticRendererBase* renderer )
kvs::glew::StochasticRenderer::setRepeatLevel	StochasticRenderer.h	/^    void setRepeatLevel( const size_t repeat_level );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( const size_t repeat_level )
kvs::glew::StochasticRenderer::~StochasticRenderer	StochasticRenderer.h	/^    virtual ~StochasticRenderer( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( void )
kvs::glew::StochasticRendererBase	StochasticRendererBase.h	/^class StochasticRendererBase : public kvs::RendererBase$/;"	c	namespace:kvs::glew	inherits:kvs::RendererBase
kvs::glew::StochasticRendererBase::Line	StochasticRendererBase.h	/^        Line,$/;"	e	enum:kvs::glew::StochasticRendererBase::RendererType
kvs::glew::StochasticRendererBase::Point	StochasticRendererBase.h	/^        Point = 0,$/;"	e	enum:kvs::glew::StochasticRendererBase::RendererType
kvs::glew::StochasticRendererBase::Polygon	StochasticRendererBase.h	/^        Polygon,$/;"	e	enum:kvs::glew::StochasticRendererBase::RendererType
kvs::glew::StochasticRendererBase::RendererType	StochasticRendererBase.h	/^    enum RendererType$/;"	g	class:kvs::glew::StochasticRendererBase	access:public
kvs::glew::StochasticRendererBase::StochasticRendererBase	StochasticRendererBase.h	/^    StochasticRendererBase( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
kvs::glew::StochasticRendererBase::Unknown	StochasticRendererBase.h	/^        Unknown$/;"	e	enum:kvs::glew::StochasticRendererBase::RendererType
kvs::glew::StochasticRendererBase::Volume	StochasticRendererBase.h	/^        Volume,$/;"	e	enum:kvs::glew::StochasticRendererBase::RendererType
kvs::glew::StochasticRendererBase::attachObject	StochasticRendererBase.h	/^    virtual void attachObject( kvs::ObjectBase* object ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( kvs::ObjectBase* object )
kvs::glew::StochasticRendererBase::clear	StochasticRendererBase.h	/^    void clear( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
kvs::glew::StochasticRendererBase::clearEnsembleBuffer	StochasticRendererBase.h	/^    virtual void clearEnsembleBuffer( void ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
kvs::glew::StochasticRendererBase::createVertexBuffer	StochasticRendererBase.h	/^    virtual void createVertexBuffer( void ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
kvs::glew::StochasticRendererBase::create_shaders	StochasticRendererBase.h	/^    void create_shaders($/;"	p	class:kvs::glew::StochasticRendererBase	access:protected	signature:( kvs::glew::ProgramObject& program_object, const kvs::glew::ShaderSource& vertex_source, const kvs::glew::ShaderSource& fragment_source )
kvs::glew::StochasticRendererBase::disableShading	StochasticRendererBase.h	/^    void disableShading( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
kvs::glew::StochasticRendererBase::disableUpdateFlag	StochasticRendererBase.h	/^    void disableUpdateFlag( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
kvs::glew::StochasticRendererBase::downloadVertexBuffer	StochasticRendererBase.h	/^    virtual void downloadVertexBuffer( void ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
kvs::glew::StochasticRendererBase::drawVertexBuffer	StochasticRendererBase.h	/^    virtual void drawVertexBuffer( const float modelview_matrix[16] ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( const float modelview_matrix[16] )
kvs::glew::StochasticRendererBase::enableShading	StochasticRendererBase.h	/^    void enableShading( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
kvs::glew::StochasticRendererBase::enableUpdateFlag	StochasticRendererBase.h	/^    void enableUpdateFlag( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
kvs::glew::StochasticRendererBase::exec	StochasticRendererBase.h	/^    virtual void exec($/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( kvs::ObjectBase* object, kvs::Camera* camera = NULL, kvs::Light* light = NULL )
kvs::glew::StochasticRendererBase::initialize	StochasticRendererBase.h	/^    void initialize( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
kvs::glew::StochasticRendererBase::initializeShader	StochasticRendererBase.h	/^    virtual void initializeShader( void ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
kvs::glew::StochasticRendererBase::isEnabledShading	StochasticRendererBase.h	/^    const bool isEnabledShading( void ) const;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void ) const
kvs::glew::StochasticRendererBase::isUpdate	StochasticRendererBase.h	/^    const bool isUpdate( void ) const;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void ) const
kvs::glew::StochasticRendererBase::kvsClassName	StochasticRendererBase.h	/^    kvsClassName( kvs::glew::StochasticRendererBase );$/;"	p	class:kvs::glew::StochasticRendererBase	access:private	signature:( kvs::glew::StochasticRendererBase )
kvs::glew::StochasticRendererBase::kvsModuleBaseClass	StochasticRendererBase.h	/^    kvsModuleBaseClass( kvs::RendererBase );$/;"	p	class:kvs::glew::StochasticRendererBase	access:private	signature:( kvs::RendererBase )
kvs::glew::StochasticRendererBase::kvsModuleCategory	StochasticRendererBase.h	/^    kvsModuleCategory( Renderer );$/;"	p	class:kvs::glew::StochasticRendererBase	access:private	signature:( Renderer )
kvs::glew::StochasticRendererBase::m_enable_shading	StochasticRendererBase.h	/^    bool                        m_enable_shading;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
kvs::glew::StochasticRendererBase::m_height	StochasticRendererBase.h	/^    size_t      m_height;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
kvs::glew::StochasticRendererBase::m_random_texture	StochasticRendererBase.h	/^    kvs::Texture2D  m_random_texture;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
kvs::glew::StochasticRendererBase::m_repeat_count	StochasticRendererBase.h	/^    size_t      m_repeat_count;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
kvs::glew::StochasticRendererBase::m_repeat_level	StochasticRendererBase.h	/^    size_t      m_repeat_level;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
kvs::glew::StochasticRendererBase::m_shader	StochasticRendererBase.h	/^    kvs::Shader::shader_type*   m_shader;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
kvs::glew::StochasticRendererBase::m_shader_program	StochasticRendererBase.h	/^    kvs::glew::ProgramObject    m_shader_program;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
kvs::glew::StochasticRendererBase::m_update_flag	StochasticRendererBase.h	/^    bool        m_update_flag;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
kvs::glew::StochasticRendererBase::m_width	StochasticRendererBase.h	/^    size_t      m_width;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
kvs::glew::StochasticRendererBase::object	StochasticRendererBase.h	/^    virtual kvs::ObjectBase* object( void ) const = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void ) const
kvs::glew::StochasticRendererBase::rendererType	StochasticRendererBase.h	/^    virtual const RendererType rendererType( void ) const = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void ) const
kvs::glew::StochasticRendererBase::setRandomTexture	StochasticRendererBase.h	/^    void setRandomTexture( const kvs::Texture2D& random_texture );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( const kvs::Texture2D& random_texture )
kvs::glew::StochasticRendererBase::setRenderSize	StochasticRendererBase.h	/^    void setRenderSize( const size_t width, const size_t height );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( const size_t width, const size_t height )
kvs::glew::StochasticRendererBase::setRepeatLevel	StochasticRendererBase.h	/^    void setRepeatLevel( const size_t repeat_level );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( const size_t repeat_level )
kvs::glew::StochasticRendererBase::setShader	StochasticRendererBase.h	/^    void setShader( const ShadingType shader );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( const ShadingType shader )
kvs::glew::StochasticRendererBase::setShader	StochasticRendererBase.h	/^inline void StochasticRendererBase::setShader( const ShadingType shader )$/;"	f	class:kvs::glew::StochasticRendererBase	signature:( const ShadingType shader )
kvs::glew::StochasticRendererBase::setup_shader	StochasticRendererBase.h	/^    virtual void setup_shader( const float modelview_matrix[16] ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:protected	signature:( const float modelview_matrix[16] )
kvs::glew::StochasticRendererBase::~StochasticRendererBase	StochasticRendererBase.h	/^    virtual ~StochasticRendererBase( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer	StochasticVolumeRenderer.h	/^class StochasticVolumeRenderer : public kvs::glew::StochasticRendererBase$/;"	c	namespace:kvs::glew	inherits:kvs::glew::StochasticRendererBase
kvs::glew::StochasticVolumeRenderer::ConnectType	StochasticVolumeRenderer.h	/^    typedef GLuint   ConnectType;$/;"	t	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::CoordType	StochasticVolumeRenderer.h	/^    typedef GLfloat  CoordType;$/;"	t	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::IndexType	StochasticVolumeRenderer.h	/^    typedef GLushort IndexType;$/;"	t	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::NormalType	StochasticVolumeRenderer.h	/^    typedef GLbyte   NormalType;$/;"	t	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::Renderer	StochasticVolumeRenderer.h	/^class StochasticVolumeRenderer::Renderer$/;"	c	class:kvs::glew::StochasticVolumeRenderer
kvs::glew::StochasticVolumeRenderer::Renderer::Renderer	StochasticVolumeRenderer.h	/^    Renderer( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::Renderer::download	StochasticVolumeRenderer.h	/^    const bool download($/;"	p	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:public	signature:( kvs::glew::VertexBufferObject& vbo, kvs::glew::IndexBufferObject& ibo )
kvs::glew::StochasticVolumeRenderer::Renderer::draw	StochasticVolumeRenderer.h	/^    void draw( const size_t step ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:public	signature:( const size_t step ) const
kvs::glew::StochasticVolumeRenderer::Renderer::m_loc_identifier	StochasticVolumeRenderer.h	/^    size_t m_loc_identifier; \/\/\/< loc identifier$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
kvs::glew::StochasticVolumeRenderer::Renderer::m_loc_values	StochasticVolumeRenderer.h	/^    size_t m_loc_values; \/\/\/< loc values$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
kvs::glew::StochasticVolumeRenderer::Renderer::m_ncells	StochasticVolumeRenderer.h	/^    size_t m_ncells; \/\/\/< number of cells$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
kvs::glew::StochasticVolumeRenderer::Renderer::m_nsteps	StochasticVolumeRenderer.h	/^    size_t m_nsteps;$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
kvs::glew::StochasticVolumeRenderer::Renderer::m_nvertices	StochasticVolumeRenderer.h	/^    size_t m_nvertices; \/\/\/< number of vertices$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
kvs::glew::StochasticVolumeRenderer::Renderer::m_off_coord	StochasticVolumeRenderer.h	/^    size_t m_off_coord; \/\/\/< offset bytes for the coodinate value array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
kvs::glew::StochasticVolumeRenderer::Renderer::m_off_index	StochasticVolumeRenderer.h	/^    size_t m_off_index; \/\/\/< offset bytes for the index array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
kvs::glew::StochasticVolumeRenderer::Renderer::m_off_normal	StochasticVolumeRenderer.h	/^    size_t m_off_normal; \/\/\/< offset bytes for the normal array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
kvs::glew::StochasticVolumeRenderer::Renderer::m_off_value	StochasticVolumeRenderer.h	/^    size_t m_off_value; \/\/\/< offset bytes for the value array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
kvs::glew::StochasticVolumeRenderer::Renderer::m_volume	StochasticVolumeRenderer.h	/^    const StochasticVolumeRenderer::Volume* m_volume; \/\/< pointer to the volume$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
kvs::glew::StochasticVolumeRenderer::Renderer::set	StochasticVolumeRenderer.h	/^    void set($/;"	p	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:public	signature:( const StochasticVolumeRenderer::Volume* volume, const size_t nsteps, const size_t nvertices, const size_t ncells, const size_t loc_identifier, const size_t loc_values )
kvs::glew::StochasticVolumeRenderer::StochasticVolumeRenderer	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer( kvs::UnstructuredVolumeObject* volume, const size_t nsteps = 1 );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( kvs::UnstructuredVolumeObject* volume, const size_t nsteps = 1 )
kvs::glew::StochasticVolumeRenderer::StochasticVolumeRenderer	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::ValueType	StochasticVolumeRenderer.h	/^    typedef GLfloat  ValueType;$/;"	t	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::Volume	StochasticVolumeRenderer.h	/^class StochasticVolumeRenderer::Volume$/;"	c	class:kvs::glew::StochasticVolumeRenderer
kvs::glew::StochasticVolumeRenderer::Volume::Volume	StochasticVolumeRenderer.h	/^    Volume( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::Volume::byteSizeOfCell	StochasticVolumeRenderer.h	/^    const size_t byteSizeOfCell( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::Volume::byteSizeOfVertex	StochasticVolumeRenderer.h	/^    const size_t byteSizeOfVertex( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::Volume::byteSizePerCell	StochasticVolumeRenderer.h	/^    const size_t byteSizePerCell( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::Volume::byteSizePerVertex	StochasticVolumeRenderer.h	/^    const size_t byteSizePerVertex( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::Volume::connections	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::ConnectType* connections( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::Volume::connections	StochasticVolumeRenderer.h	/^    const StochasticVolumeRenderer::ConnectType* connections( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::Volume::coords	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::CoordType* coords( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::Volume::coords	StochasticVolumeRenderer.h	/^    const StochasticVolumeRenderer::CoordType* coords( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::Volume::create	StochasticVolumeRenderer.h	/^    void create( const size_t nsteps, const size_t nvertices, const size_t ncells );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( const size_t nsteps, const size_t nvertices, const size_t ncells )
kvs::glew::StochasticVolumeRenderer::Volume::indices	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::IndexType* indices( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::Volume::indices	StochasticVolumeRenderer.h	/^    const StochasticVolumeRenderer::IndexType* indices( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::Volume::m_connections	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::ConnectType* m_connections;$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
kvs::glew::StochasticVolumeRenderer::Volume::m_coords	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::CoordType* m_coords; \/\/\/< coordinate value array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
kvs::glew::StochasticVolumeRenderer::Volume::m_indices	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::IndexType* m_indices; \/\/\/< index array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
kvs::glew::StochasticVolumeRenderer::Volume::m_ncells	StochasticVolumeRenderer.h	/^    size_t m_ncells; \/\/\/< number of cells$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
kvs::glew::StochasticVolumeRenderer::Volume::m_normals	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::NormalType* m_normals; \/\/\/< normal array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
kvs::glew::StochasticVolumeRenderer::Volume::m_nsteps	StochasticVolumeRenderer.h	/^    size_t m_nsteps;$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
kvs::glew::StochasticVolumeRenderer::Volume::m_nvertices	StochasticVolumeRenderer.h	/^    size_t m_nvertices; \/\/\/< number of vertices$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
kvs::glew::StochasticVolumeRenderer::Volume::m_values	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::ValueType* m_values; \/\/\/< color value array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
kvs::glew::StochasticVolumeRenderer::Volume::ncells	StochasticVolumeRenderer.h	/^    const size_t ncells( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::Volume::normals	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::NormalType* normals( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::Volume::normals	StochasticVolumeRenderer.h	/^    const StochasticVolumeRenderer::NormalType* normals( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::Volume::nvertices	StochasticVolumeRenderer.h	/^    const size_t nvertices( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::Volume::release	StochasticVolumeRenderer.h	/^    void release( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::Volume::values	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::ValueType* values( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::Volume::values	StochasticVolumeRenderer.h	/^    const StochasticVolumeRenderer::ValueType* values( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::Volume::~Volume	StochasticVolumeRenderer.h	/^    ~Volume( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::attachObject	StochasticVolumeRenderer.h	/^    void attachObject( kvs::ObjectBase* object );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( kvs::ObjectBase* object )
kvs::glew::StochasticVolumeRenderer::attachVolumeObject	StochasticVolumeRenderer.h	/^    void attachVolumeObject( kvs::UnstructuredVolumeObject* volume );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( kvs::UnstructuredVolumeObject* volume )
kvs::glew::StochasticVolumeRenderer::clearEnsembleBuffer	StochasticVolumeRenderer.h	/^    void clearEnsembleBuffer( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::createVertexBuffer	StochasticVolumeRenderer.h	/^    void createVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::create_preintegration_table	StochasticVolumeRenderer.h	/^    void create_preintegration_table( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( void )
kvs::glew::StochasticVolumeRenderer::create_shaders	StochasticVolumeRenderer.h	/^    void create_shaders($/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( kvs::glew::ProgramObject& program_object, const kvs::glew::ShaderSource& vertex_source, const kvs::glew::ShaderSource& geometry_source, const kvs::glew::ShaderSource& fragment_source )
kvs::glew::StochasticVolumeRenderer::create_vertexbuffer_from_volume	StochasticVolumeRenderer.h	/^    void create_vertexbuffer_from_volume( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( void )
kvs::glew::StochasticVolumeRenderer::downloadVertexBuffer	StochasticVolumeRenderer.h	/^    void downloadVertexBuffer( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::drawVertexBuffer	StochasticVolumeRenderer.h	/^    void drawVertexBuffer( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( const float modelview_matrix[16] )
kvs::glew::StochasticVolumeRenderer::exec	StochasticVolumeRenderer.h	/^    void exec( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( kvs::ObjectBase* object, kvs::Camera* camera, kvs::Light* light )
kvs::glew::StochasticVolumeRenderer::initialize	StochasticVolumeRenderer.h	/^    void initialize( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::initializeShader	StochasticVolumeRenderer.h	/^    void initializeShader( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::initialize_decomposition_texture	StochasticVolumeRenderer.h	/^    void initialize_decomposition_texture( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( void )
kvs::glew::StochasticVolumeRenderer::kvsClassName	StochasticVolumeRenderer.h	/^    kvsClassName( kvs::glew::StochasticVolumeRenderer );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( kvs::glew::StochasticVolumeRenderer )
kvs::glew::StochasticVolumeRenderer::kvsModuleBaseClass	StochasticVolumeRenderer.h	/^    kvsModuleBaseClass( kvs::glew::StochasticRendererBase );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( kvs::glew::StochasticRendererBase )
kvs::glew::StochasticVolumeRenderer::kvsModuleCategory	StochasticVolumeRenderer.h	/^    kvsModuleCategory( Renderer );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( Renderer )
kvs::glew::StochasticVolumeRenderer::m_decomposition_texture	StochasticVolumeRenderer.h	/^    kvs::Texture2D                 m_decomposition_texture;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::m_edge_size	StochasticVolumeRenderer.h	/^    float       m_edge_size;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::m_ibo	StochasticVolumeRenderer.h	/^    kvs::glew::IndexBufferObject    m_ibo;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::m_loc_identifier	StochasticVolumeRenderer.h	/^    size_t      m_loc_identifier;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::m_loc_values	StochasticVolumeRenderer.h	/^    size_t      m_loc_values;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::m_nsteps	StochasticVolumeRenderer.h	/^    size_t      m_nsteps;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::m_ref_volume	StochasticVolumeRenderer.h	/^    kvs::UnstructuredVolumeObject*  m_ref_volume;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::m_renderer	StochasticVolumeRenderer.h	/^    Renderer*   m_renderer;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::m_step	StochasticVolumeRenderer.h	/^    size_t      m_step;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::m_table	StochasticVolumeRenderer.h	/^    kvs::glew::PreIntegrationTable m_table;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::m_tfunc	StochasticVolumeRenderer.h	/^    kvs::TransferFunction           m_tfunc;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::m_vbo	StochasticVolumeRenderer.h	/^    kvs::glew::VertexBufferObject   m_vbo;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::m_volume	StochasticVolumeRenderer.h	/^    Volume*     m_volume;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
kvs::glew::StochasticVolumeRenderer::object	StochasticVolumeRenderer.h	/^    kvs::ObjectBase* object( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::rendererType	StochasticVolumeRenderer.h	/^    const RendererType rendererType( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::setEdgeSize	StochasticVolumeRenderer.h	/^    void setEdgeSize( const float edge_size );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( const float edge_size )
kvs::glew::StochasticVolumeRenderer::setNSteps	StochasticVolumeRenderer.h	/^    void setNSteps( const size_t nsteps );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( const size_t nsteps )
kvs::glew::StochasticVolumeRenderer::setStep	StochasticVolumeRenderer.h	/^    void setStep( const size_t step );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( const size_t step )
kvs::glew::StochasticVolumeRenderer::setTransferFunction	StochasticVolumeRenderer.h	/^    void setTransferFunction( const kvs::TransferFunction& tfunc );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( const kvs::TransferFunction& tfunc )
kvs::glew::StochasticVolumeRenderer::setup_shader	StochasticVolumeRenderer.h	/^    void setup_shader( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( const float modelview_matrix[16] )
kvs::glew::StochasticVolumeRenderer::transferFunction	StochasticVolumeRenderer.h	/^    const kvs::TransferFunction& transferFunction( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void ) const
kvs::glew::StochasticVolumeRenderer::transferFunction	StochasticVolumeRenderer.h	/^    kvs::TransferFunction& transferFunction( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
kvs::glew::StochasticVolumeRenderer::~StochasticVolumeRenderer	StochasticVolumeRenderer.h	/^    virtual ~StochasticVolumeRenderer( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
kvs::iext	CellTree.cpp	/^        const float iext[3] = { nbuckets\/ext[0], nbuckets\/ext[1], nbuckets\/ext[2] };$/;"	l
kvs::iext	CellTree.cpp	/^    const float iext[3] = { nbuckets\/ext[0], nbuckets\/ext[1], nbuckets\/ext[2] };$/;"	l
kvs::ind	CellTree.cpp	/^                int   ind = (int)( (cen-min[d])*iext[d] );  $/;"	l
kvs::ind	CellTree.cpp	/^            int   ind = (int)( (cen-min[d])*iext[d] );  $/;"	l
kvs::index	CellLocatorBIH.cpp	/^        unsigned int index;$/;"	l
kvs::infile	CellLocatorBIH.cpp	/^    std::ifstream infile( filename, std::ios_base::in|std::ios_base::binary );$/;"	p	file:	signature:( filename, std::ios_base::in|std::ios_base::binary )
kvs::init	CellTree.cpp	/^	    m_thread[1].init( m_leafsize, &m_nodes2, m_pc2, 0, rmin, rmax );$/;"	p	file:	signature:( m_leafsize, &m_nodes2, m_pc2, 0, rmin, rmax )
kvs::init	CellTree.cpp	/^        m_thread[0].init( m_leafsize, &m_nodes1, m_pc1, 0, lmin, lmax );$/;"	p	file:	signature:( m_leafsize, &m_nodes1, m_pc1, 0, lmin, lmax )
kvs::insert	CellTree.cpp	/^    m_nodes.insert( m_nodes.end(), child, child+2 );$/;"	p	file:	signature:( m_nodes.end(), child, child+2 )
kvs::insert	CellTree.cpp	/^    nodes.insert( nodes.end(), child, child+2 );$/;"	p	file:	signature:( nodes.end(), child, child+2 )
kvs::lm	CellLocatorBIH.cpp	/^        float lm,rm;$/;"	l
kvs::lmax	CellTree.cpp	/^                float lmax = -std::numeric_limits<float>::max();$/;"	l
kvs::lmax	CellTree.cpp	/^            float lmax = -std::numeric_limits<float>::max();$/;"	l
kvs::lmax	CellTree.cpp	/^        float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
kvs::lmax	CellTree.cpp	/^    float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
kvs::lmin	CellTree.cpp	/^        float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
kvs::lmin	CellTree.cpp	/^    float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
kvs::local	CellLocator.cpp	/^    kvs::Vector3f local = m_cell->localPoint();    $/;"	l
kvs::lvol	CellTree.cpp	/^                float lvol = (lmax-min[d])\/ext[d];			\/\/left volume$/;"	l
kvs::lvol	CellTree.cpp	/^            float lvol = (lmax-min[d])\/ext[d];			\/\/left volume$/;"	l
kvs::make_leaf	CellTree.cpp	/^        root1.make_leaf( start1, size1 );	\/\/set index = 3 start = 0 size = ncells$/;"	p	file:	signature:( start1, size1 )
kvs::make_leaf	CellTree.cpp	/^        root2.make_leaf( start2, size2 );	\/\/set index = 3 start = 0 size = ncells$/;"	p	file:	signature:( start2, size2 )
kvs::make_node	CellTree.cpp	/^    m_nodes[index].make_node( m_nodes.size(), dim, clip );$/;"	p	file:	signature:( m_nodes.size(), dim, clip )
kvs::make_node	CellTree.cpp	/^    nodes[index].make_node( nodes.size(), dim, clip );$/;"	p	file:	signature:( nodes.size(), dim, clip )
kvs::mask	CellTree.cpp	/^        kvs::BitArray mask;$/;"	l
kvs::max	CellTree.cpp	/^    float max[3] = { $/;"	l
kvs::mid	CellTree.cpp	/^        per_cell* mid   = begin;$/;"	l
kvs::mid	CellTree.cpp	/^    per_cell* mid   = begin;$/;"	l
kvs::min	CellTree.cpp	/^    float min[3] = { $/;"	l
kvs::n	CellLocatorBIH.cpp	/^                    int n = sp1-stack1;$/;"	l
kvs::nbuckets	CellTree.cpp	/^        const unsigned int nbuckets = 6;$/;"	l
kvs::nbuckets	CellTree.cpp	/^    const unsigned int nbuckets  = 6;$/;"	l
kvs::nbuckets	CellTree.cpp	/^    const unsigned int nbuckets = 6;$/;"	l
kvs::ncells	CellTree.cpp	/^    const size_t ncells  = ds->ncells();$/;"	l
kvs::ni	CellTree.cpp	/^        std::vector<CellTree::node>::iterator ni = ct.nodes.begin()+1;  $/;"	l
kvs::ni	CellTree.cpp	/^        std::vector<CellTree::node>::iterator ni = ct.nodes.begin();$/;"	l
kvs::nleaves	CellLocatorBIH.cpp	/^    const unsigned int nleaves = m_celltree->leaves.size();$/;"	l
kvs::nleaves	CellLocatorBIH.cpp	/^    infile >> nleaves;$/;"	l
kvs::nleaves	CellLocatorBIH.cpp	/^    outfile << nleaves;$/;"	l
kvs::nleaves	CellLocatorBIH.cpp	/^    unsigned int nleaves;$/;"	l
kvs::nn	CellTree.cpp	/^        std::vector<CellTree::node>::iterator nn = ct.nodes.begin()+1;$/;"	l
kvs::nn	CellTree.cpp	/^        std::vector<CellTree::node>::iterator nn = ct.nodes.begin()+3;$/;"	l
kvs::nnodes	CellLocator.cpp	/^    int nnodes = m_dataset->cellType();$/;"	l
kvs::nnodes	CellLocatorBIH.cpp	/^    const unsigned int nnodes = m_celltree->nodes.size();$/;"	l
kvs::nnodes	CellLocatorBIH.cpp	/^    infile >> nnodes;$/;"	l
kvs::nnodes	CellLocatorBIH.cpp	/^    outfile << nnodes;$/;"	l
kvs::nnodes	CellLocatorBIH.cpp	/^    unsigned int nnodes;$/;"	l
kvs::node	CellLocatorBIH.cpp	/^        kvs::CellTree::node node;$/;"	l
kvs::node_size	CellTree.cpp	/^        const unsigned int node_size = m_nodes1.size() + m_nodes2.size() + 1;$/;"	l
kvs::nodes	CellTree.cpp	/^    std::vector<CellTree::node>& nodes = *m_nodes;$/;"	l
kvs::outfile	CellLocatorBIH.cpp	/^    std::ofstream outfile( filename, std::ios_base::out|std::ios_base::binary );$/;"	p	file:	signature:( filename, std::ios_base::out|std::ios_base::binary )
kvs::plane	CellTree.cpp	/^        float plane;$/;"	l
kvs::plane	CellTree.cpp	/^    float plane;$/;"	l
kvs::push_back	CellTree.cpp	/^        m_nodes.push_back( root );		$/;"	p	file:	signature:( root )
kvs::push_back	CellTree.cpp	/^        m_nodes1.push_back( root1 );$/;"	p	file:	signature:( root1 )
kvs::push_back	CellTree.cpp	/^        m_nodes2.push_back( root2 );$/;"	p	file:	signature:( root2 )
kvs::resize	CellLocatorBIH.cpp	/^    ct->leaves.resize( nleaves );$/;"	p	file:	signature:( nleaves )
kvs::resize	CellLocatorBIH.cpp	/^    ct->nodes.resize( nnodes );$/;"	p	file:	signature:( nnodes )
kvs::resize	CellTree.cpp	/^        ct.leaves.resize( ncells );$/;"	p	file:	signature:( ncells )
kvs::resize	CellTree.cpp	/^        ct.nodes.resize( m_nodes.size() );$/;"	p	file:	signature:( m_nodes.size() )
kvs::resize	CellTree.cpp	/^        ct.nodes.resize( node_size );$/;"	p	file:	signature:( node_size )
kvs::rm	CellLocatorBIH.cpp	/^        float lm,rm;$/;"	l
kvs::rm	CellLocatorBIH.cpp	/^        infile >> index >> lm >> rm;$/;"	l
kvs::rmax	CellTree.cpp	/^        float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
kvs::rmax	CellTree.cpp	/^    float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
kvs::rmin	CellTree.cpp	/^                float rmin =  std::numeric_limits<float>::max();$/;"	l
kvs::rmin	CellTree.cpp	/^            float rmin =  std::numeric_limits<float>::max();$/;"	l
kvs::rmin	CellTree.cpp	/^        float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
kvs::rmin	CellTree.cpp	/^    float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
kvs::root	CellTree.cpp	/^        CellTree::node root;$/;"	l
kvs::root1	CellTree.cpp	/^        CellTree::node root1;$/;"	l
kvs::root2	CellTree.cpp	/^        CellTree::node root2;$/;"	l
kvs::rvol	CellTree.cpp	/^                float rvol = (max[d]-rmin)\/ext[d];			\/\/right volume$/;"	l
kvs::rvol	CellTree.cpp	/^            float rvol = (max[d]-rmin)\/ext[d];			\/\/right volume$/;"	l
kvs::setGlobalPoint	CellLocator.cpp	/^    m_cell->setGlobalPoint( gpos );$/;"	p	file:	signature:( gpos )
kvs::setParallel	CellLocatorBIH.cpp	/^	m_builder->setParallel();$/;"	p	file:	signature:()
kvs::size	CellTree.cpp	/^        unsigned int size  = ncells;$/;"	l
kvs::size	CellTree.cpp	/^    unsigned int size  = m_nodes[index].size();$/;"	l
kvs::size	CellTree.cpp	/^    unsigned int size  = nodes[index].size();$/;"	l
kvs::size1	CellTree.cpp	/^        unsigned int size1 = mid - m_pc;$/;"	l
kvs::size2	CellTree.cpp	/^        unsigned int size2 = end - mid;$/;"	l
kvs::sp	CellLocatorBIH.cpp	/^                    const unsigned int* sp = pt.sp();$/;"	l
kvs::sp1	CellLocatorBIH.cpp	/^                    const unsigned int* sp1 = pt.sp();$/;"	l
kvs::sp2	CellLocatorBIH.cpp	/^                    const unsigned int* sp2 = pt.lr_sp();$/;"	l
kvs::stack1	CellLocatorBIH.cpp	/^                    const unsigned int* stack1 = pt.stack();$/;"	l
kvs::stack2	CellLocatorBIH.cpp	/^                    const unsigned int* stack2 = pt.lr_stack();$/;"	l
kvs::start	CellLocatorBIH.cpp	/^    timer.start();$/;"	p	file:	signature:()
kvs::start	CellTree.cpp	/^	    m_thread[0].start();$/;"	p	file:	signature:()
kvs::start	CellTree.cpp	/^	    m_thread[1].start();$/;"	p	file:	signature:()
kvs::start	CellTree.cpp	/^        unsigned int start = 0;$/;"	l
kvs::start	CellTree.cpp	/^    unsigned int start = m_nodes[index].start();$/;"	l
kvs::start	CellTree.cpp	/^    unsigned int start = nodes[index].start();$/;"	l
kvs::start1	CellTree.cpp	/^        unsigned int start1 = 0;$/;"	l
kvs::start2	CellTree.cpp	/^        unsigned int start2 = 0;$/;"	l
kvs::std::cerr	CellLocatorBIH.cpp	/^        std::cerr << "CellLocator Mode parameter error!\\n";$/;"	m	class:kvs::std	file:
kvs::std::cerr	CellLocatorBIH.cpp	/^        std::cerr << "No dataset! \\n";$/;"	m	class:kvs::std	file:
kvs::std::cout	CellLocatorBIH.cpp	/^    std::cout << "Cell Tree ..." ;$/;"	m	class:kvs::std	file:
kvs::std::endl	CellLocator.cpp	/^        std::cerr << "no dataset!" << std::endl;$/;"	m	class:kvs::std	file:
kvs::std::endl	CellLocator.cpp	/^        std::cout << "v[" << i << "] = " << m_cell->vertices()[i] << std::endl;$/;"	m	class:kvs::std	file:
kvs::std::endl	CellLocatorBIH.cpp	/^        std::cout << "can't open " << filename << " for reading. read failed" << std::endl;$/;"	m	class:kvs::std	file:
kvs::std::endl	CellLocatorBIH.cpp	/^        std::cout << "can't open " << filename << " for writing. write failed" << std::endl;$/;"	m	class:kvs::std	file:
kvs::std::endl	CellLocatorBIH.cpp	/^    std::cout << "\\t " << timer.sec() << " seconds " << std::endl;$/;"	m	class:kvs::std	file:
kvs::std::endl	CellTree.cpp	/^		std::cout << "nnodes: " << m_nodes.size() << std::endl;$/;"	m	class:kvs::std	file:
kvs::std::endl	CellTree.cpp	/^		std::cout << "nnodes: " << node_size << std::endl;$/;"	m	class:kvs::std	file:
kvs::std::endl	CellTree.cpp	/^    std::cout << "max external coords found by kvs::BoundingBox:\\t" << max[0] << " " << max[1] << " "  << max[2] << " "  << std::endl;$/;"	m	class:kvs::std	file:
kvs::std::endl	CellTree.cpp	/^    std::cout << "min external coords found by kvs::BoundingBox:\\t" << min[0] << " " << min[1] << " "  << min[2] << " "  << std::endl;$/;"	m	class:kvs::std	file:
kvs::std::nth_element	CellTree.cpp	/^            std::nth_element( begin, mid, end, center_order( dim ) );$/;"	p	class:kvs::std	file:	signature:( begin, mid, end, center_order( dim ) )
kvs::std::nth_element	CellTree.cpp	/^        std::nth_element( begin, mid, end, center_order( dim ) );$/;"	p	class:kvs::std	file:	signature:( begin, mid, end, center_order( dim ) )
kvs::stop	CellLocatorBIH.cpp	/^    timer.stop();$/;"	p	file:	signature:()
kvs::sum	CellTree.cpp	/^            unsigned int sum = 0;$/;"	l
kvs::sum	CellTree.cpp	/^        unsigned int sum = 0;$/;"	l
kvs::sz	CellLocatorBIH.cpp	/^        infile >> sz;$/;"	l
kvs::sz	CellLocatorBIH.cpp	/^        unsigned int sz;$/;"	l
kvs::timer	CellLocatorBIH.cpp	/^    kvs::Timer timer;$/;"	l
kvs::wait	CellTree.cpp	/^	    m_thread[0].wait();$/;"	p	file:	signature:()
kvs::wait	CellTree.cpp	/^	    m_thread[1].wait();$/;"	p	file:	signature:()
kvs::x	CellLocator.cpp	/^        center.x() += m_cell->vertices()[i].x();$/;"	p	file:	signature:()
kvs::x	CellLocator.cpp	/^    center.x() \/= nnodes; $/;"	p	file:	signature:()
kvs::y	CellLocator.cpp	/^        center.y() += m_cell->vertices()[i].y();$/;"	p	file:	signature:()
kvs::y	CellLocator.cpp	/^    center.y() \/= nnodes; $/;"	p	file:	signature:()
kvs::z	CellLocator.cpp	/^        center.z() += m_cell->vertices()[i].z();$/;"	p	file:	signature:()
kvs::z	CellLocator.cpp	/^    center.z() \/= nnodes; $/;"	p	file:	signature:()
kvsClassName	CellLocator.h	/^    kvsClassName( kvs::CellLocator );$/;"	p	class:kvs::CellLocator	access:private	signature:( kvs::CellLocator )
kvsClassName	NullObject.h	/^    kvsClassName( kvs::NullObject );$/;"	p	class:kvs::NullObject	access:private	signature:( kvs::NullObject )
kvsClassName	PolygonToPolygon.h	/^    kvsClassName( kvs::PolygonToPolygon );$/;"	p	class:kvs::PolygonToPolygon	access:private	signature:( kvs::PolygonToPolygon )
kvsClassName	StochasticLineRenderer.h	/^    kvsClassName( kvs::glew::StochasticLineRenderer );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:private	signature:( kvs::glew::StochasticLineRenderer )
kvsClassName	StochasticPointRenderer.h	/^    kvsClassName( kvs::glew::StochasticPointRenderer );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:private	signature:( kvs::glew::StochasticPointRenderer )
kvsClassName	StochasticPolygonRenderer.h	/^    kvsClassName( kvs::glew::StochasticPolygonRenderer );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:private	signature:( kvs::glew::StochasticPolygonRenderer )
kvsClassName	StochasticRenderer.h	/^    kvsClassName( kvs::glew::StochasticRenderer );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( kvs::glew::StochasticRenderer )
kvsClassName	StochasticRendererBase.h	/^    kvsClassName( kvs::glew::StochasticRendererBase );$/;"	p	class:kvs::glew::StochasticRendererBase	access:private	signature:( kvs::glew::StochasticRendererBase )
kvsClassName	StochasticVolumeRenderer.h	/^    kvsClassName( kvs::glew::StochasticVolumeRenderer );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( kvs::glew::StochasticVolumeRenderer )
kvsClassName_without_virtual	PreIntegrationTable.h	/^    kvsClassName_without_virtual( PreIntegrationTable );$/;"	p	class:kvs::glew::PreIntegrationTable	access:private	signature:( PreIntegrationTable )
kvsModuleBaseClass	NullObject.h	/^    kvsModuleBaseClass( kvs::ObjectBase );$/;"	p	class:kvs::NullObject	access:private	signature:( kvs::ObjectBase )
kvsModuleBaseClass	PolygonToPolygon.h	/^    kvsModuleBaseClass( kvs::FilterBase );$/;"	p	class:kvs::PolygonToPolygon	access:private	signature:( kvs::FilterBase )
kvsModuleBaseClass	StochasticLineRenderer.h	/^    kvsModuleBaseClass( kvs::glew::StochasticRendererBase );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:private	signature:( kvs::glew::StochasticRendererBase )
kvsModuleBaseClass	StochasticPointRenderer.h	/^    kvsModuleBaseClass( kvs::glew::StochasticRendererBase );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:private	signature:( kvs::glew::StochasticRendererBase )
kvsModuleBaseClass	StochasticPolygonRenderer.h	/^    kvsModuleBaseClass( kvs::glew::StochasticRendererBase );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:private	signature:( kvs::glew::StochasticRendererBase )
kvsModuleBaseClass	StochasticRenderer.h	/^    kvsModuleBaseClass( kvs::RendererBase );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( kvs::RendererBase )
kvsModuleBaseClass	StochasticRendererBase.h	/^    kvsModuleBaseClass( kvs::RendererBase );$/;"	p	class:kvs::glew::StochasticRendererBase	access:private	signature:( kvs::RendererBase )
kvsModuleBaseClass	StochasticVolumeRenderer.h	/^    kvsModuleBaseClass( kvs::glew::StochasticRendererBase );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( kvs::glew::StochasticRendererBase )
kvsModuleCategory	NullObject.h	/^    kvsModuleCategory( Object );$/;"	p	class:kvs::NullObject	access:private	signature:( Object )
kvsModuleCategory	PolygonToPolygon.h	/^    kvsModuleCategory( Filter );$/;"	p	class:kvs::PolygonToPolygon	access:private	signature:( Filter )
kvsModuleCategory	StochasticLineRenderer.h	/^    kvsModuleCategory( Renderer );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:private	signature:( Renderer )
kvsModuleCategory	StochasticPointRenderer.h	/^    kvsModuleCategory( Renderer );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:private	signature:( Renderer )
kvsModuleCategory	StochasticPolygonRenderer.h	/^    kvsModuleCategory( Renderer );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:private	signature:( Renderer )
kvsModuleCategory	StochasticRenderer.h	/^    kvsModuleCategory( Renderer );$/;"	p	class:kvs::glew::StochasticRenderer	access:private	signature:( Renderer )
kvsModuleCategory	StochasticRendererBase.h	/^    kvsModuleCategory( Renderer );$/;"	p	class:kvs::glew::StochasticRendererBase	access:private	signature:( Renderer )
kvsModuleCategory	StochasticVolumeRenderer.h	/^    kvsModuleCategory( Renderer );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( Renderer )
kvsModuleSuperClass	PolygonToPolygon.h	/^    kvsModuleSuperClass( kvs::PolygonObject );$/;"	p	class:kvs::PolygonToPolygon	access:private	signature:( kvs::PolygonObject )
l	CellTree.h	/^                bool l = p <= n->lmax();$/;"	l
leaves	CellTree.h	/^    std::vector<unsigned int> leaves;$/;"	m	class:kvs::CellTree	access:public
left	CellTree.h	/^                const unsigned int left = n->left();    \/\/ get the VECTOR STORAGE index of the left child$/;"	l
left	CellTree.h	/^        unsigned int left() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
left_predicate	CellTree.h	/^        left_predicate( unsigned int _d, float _p ) : $/;"	f	struct:__anon1::left_predicate	access:public	signature:( unsigned int _d, float _p )
left_predicate	CellTree.h	/^    struct left_predicate$/;"	s	namespace:__anon1
lm	CellLocatorBIH.cpp	/^        float lm,rm;$/;"	l
lm	CellTree.h	/^                float lm;$/;"	m	struct:kvs::CellTree::node::__anon2::__anon3	access:public
lmax	CellTree.cpp	/^                float lmax = -std::numeric_limits<float>::max();$/;"	l
lmax	CellTree.cpp	/^            float lmax = -std::numeric_limits<float>::max();$/;"	l
lmax	CellTree.cpp	/^        float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
lmax	CellTree.cpp	/^    float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
lmax	CellTree.h	/^        const float& lmax() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
lmin	CellTree.cpp	/^        float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
lmin	CellTree.cpp	/^    float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
local	CellLocator.cpp	/^    kvs::Vector3f local = m_cell->localPoint();    $/;"	l
locator_d	main.cpp	/^	kvs::CellLocatorBIH* locator_d = new kvs::CellLocatorBIH(volume);$/;"	l
locator_s	main.cpp	/^	kvs::CellLocatorBIH* locator_s = new kvs::CellLocatorBIH(volume);$/;"	l
lr_sp	CellTree.h	/^        const unsigned int* lr_sp()$/;"	f	struct:kvs::CellTree::in_traversal_cached	access:public	signature:()
lr_stack	CellTree.h	/^        const unsigned int* lr_stack()$/;"	f	struct:kvs::CellTree::in_traversal_cached	access:public	signature:()
lvol	CellTree.cpp	/^                float lvol = (lmax-min[d])\/ext[d];			\/\/left volume$/;"	l
lvol	CellTree.cpp	/^            float lvol = (lmax-min[d])\/ext[d];			\/\/left volume$/;"	l
m_bounds	BoundingBox.h	/^        float m_bounds[6];$/;"	m	class:kvs::BoundingBox	access:private
m_builder	CellLocatorBIH.h	/^    CellTreeBuilder*                       m_builder; $/;"	m	class:kvs::CellLocatorBIH	access:private
m_cache1	CellLocatorBIH.h	/^    unsigned int                           m_cache1[32];$/;"	m	class:kvs::CellLocatorBIH	access:private
m_cache2	CellLocatorBIH.h	/^    unsigned int                           m_cache2[16];$/;"	m	class:kvs::CellLocatorBIH	access:private
m_cell	CellLocator.h	/^    kvs::CellBase<float>*                   m_cell;$/;"	m	class:kvs::CellLocator	access:protected
m_celltree	CellLocatorBIH.h	/^    mutable CellTree*                      m_celltree;$/;"	m	class:kvs::CellLocatorBIH	access:private
m_circle_threshold	StochasticPointRenderer.h	/^    size_t  m_circle_threshold; \/\/\/< threshold for the shape of the particle$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
m_clear_ensemble_buffer	StochasticRenderer.h	/^    bool    m_clear_ensemble_buffer;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_coarse_level	StochasticRenderer.h	/^    size_t      m_coarse_level;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_color_texture	StochasticRenderer.h	/^    kvs::Texture2D                      m_color_texture;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_colors	StochasticPointRenderer.h	/^    StochasticPointRenderer::ColorType* m_colors; \/\/\/< color value array$/;"	m	class:kvs::glew::StochasticPointRenderer::Particles	access:private
m_connections	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::ConnectType* m_connections;$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
m_coords	StochasticPointRenderer.h	/^    StochasticPointRenderer::CoordType* m_coords; \/\/\/< coordinate value array$/;"	m	class:kvs::glew::StochasticPointRenderer::Particles	access:private
m_coords	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::CoordType* m_coords; \/\/\/< coordinate value array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
m_count	StochasticPointRenderer.h	/^    size_t  m_count; \/\/\/< number of vertices$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
m_cp1	CellLocatorBIH.h	/^    unsigned int*                          m_cp1;$/;"	m	class:kvs::CellLocatorBIH	access:private
m_cp2	CellLocatorBIH.h	/^    unsigned int*                          m_cp2;$/;"	m	class:kvs::CellLocatorBIH	access:private
m_ct	CellTree.h	/^        const CellTree&		    m_ct;$/;"	m	struct:kvs::CellTree::in_traversal_cached	access:public
m_ct	CellTree.h	/^        const CellTree&		    m_ct;$/;"	m	struct:kvs::CellTree::pre_traversal	access:public
m_ct	CellTree.h	/^        const CellTree&		    m_ct;$/;"	m	struct:kvs::CellTree::pre_traversal_cached	access:public
m_dataset	CellLocator.h	/^    const kvs::UnstructuredVolumeObject*    m_dataset;$/;"	m	class:kvs::CellLocator	access:protected
m_decomposition_texture	StochasticVolumeRenderer.h	/^    kvs::Texture2D                 m_decomposition_texture;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
m_depth_texture	StochasticRenderer.h	/^    kvs::Texture2D                      m_depth_texture;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_edge_size	StochasticVolumeRenderer.h	/^    float       m_edge_size;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
m_enable_lod	StochasticRenderer.h	/^    bool    m_enable_lod;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_enable_shading	StochasticRendererBase.h	/^    bool                        m_enable_shading;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
m_ensemble_buffer	StochasticRenderer.h	/^    kvs::glew::EnsembleAverageBuffer    m_ensemble_buffer;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_framebuffer	StochasticRenderer.h	/^    kvs::glew::FrameBufferObject        m_framebuffer;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_height	StochasticRenderer.h	/^    size_t      m_height;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_height	StochasticRendererBase.h	/^    size_t      m_height;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
m_ibo	StochasticLineRenderer.h	/^    kvs::glew::IndexBufferObject    m_ibo;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
m_ibo	StochasticPolygonRenderer.h	/^    kvs::glew::IndexBufferObject    m_ibo;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
m_ibo	StochasticVolumeRenderer.h	/^    kvs::glew::IndexBufferObject    m_ibo;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
m_index	CellTree.h	/^	unsigned int					m_index;$/;"	m	class:kvs::SplitThread	access:private
m_indices	StochasticPointRenderer.h	/^    StochasticPointRenderer::IndexType* m_indices; \/\/\/< index array$/;"	m	class:kvs::glew::StochasticPointRenderer::Particles	access:private
m_indices	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::IndexType* m_indices; \/\/\/< index array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
m_leafsize	CellTree.h	/^    unsigned int                        m_leafsize;$/;"	m	class:kvs::CellTreeBuilder	access:private
m_leafsize	CellTree.h	/^    unsigned int                    m_leafsize;$/;"	m	class:kvs::SplitThread	access:private
m_line_opacity	StochasticLineRenderer.h	/^    float   m_line_opacity;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
m_loc_identifier	StochasticLineRenderer.h	/^    size_t  m_loc_identifier; \/\/\/< loc indectifier$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
m_loc_identifier	StochasticPointRenderer.h	/^    size_t      m_loc_identifier; \/\/\/< loc indectifier$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
m_loc_identifier	StochasticPointRenderer.h	/^    size_t  m_loc_identifier; \/\/\/< $/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
m_loc_identifier	StochasticPolygonRenderer.h	/^    size_t  m_loc_identifier; \/\/\/< loc indectifier$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
m_loc_identifier	StochasticVolumeRenderer.h	/^    size_t      m_loc_identifier;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
m_loc_identifier	StochasticVolumeRenderer.h	/^    size_t m_loc_identifier; \/\/\/< loc identifier$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
m_loc_values	StochasticVolumeRenderer.h	/^    size_t      m_loc_values;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
m_loc_values	StochasticVolumeRenderer.h	/^    size_t m_loc_values; \/\/\/< loc values$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
m_lrsp	CellTree.h	/^        unsigned int*           m_lrsp;$/;"	m	struct:kvs::CellTree::in_traversal_cached	access:public
m_lrstack	CellTree.h	/^        unsigned int            m_lrstack[16];$/;"	m	struct:kvs::CellTree::in_traversal_cached	access:public
m_max	CellTree.h	/^	float							m_max[3];$/;"	m	class:kvs::SplitThread	access:private
m_min	CellTree.h	/^	float							m_min[3];$/;"	m	class:kvs::SplitThread	access:private
m_mode	CellLocator.h	/^    Mode                                    m_mode;$/;"	m	class:kvs::CellLocator	access:protected
m_modelview_matrix	StochasticRenderer.h	/^    float   m_modelview_matrix[16];$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_ncells	StochasticVolumeRenderer.h	/^    size_t m_ncells; \/\/\/< number of cells$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
m_ncells	StochasticVolumeRenderer.h	/^    size_t m_ncells; \/\/\/< number of cells$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
m_nodes	CellTree.h	/^	std::vector<CellTree::node>*	m_nodes;$/;"	m	class:kvs::SplitThread	access:private
m_nodes	CellTree.h	/^    std::vector<kvs::CellTree::node>    m_nodes;$/;"	m	class:kvs::CellTreeBuilder	access:private
m_nodes1	CellTree.h	/^    std::vector<kvs::CellTree::node>    m_nodes1;$/;"	m	class:kvs::CellTreeBuilder	access:private
m_nodes2	CellTree.h	/^    std::vector<kvs::CellTree::node>    m_nodes2;$/;"	m	class:kvs::CellTreeBuilder	access:private
m_normals	StochasticPointRenderer.h	/^    StochasticPointRenderer::NormalType* m_normals; \/\/\/< normal vector array$/;"	m	class:kvs::glew::StochasticPointRenderer::Particles	access:private
m_normals	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::NormalType* m_normals; \/\/\/< normal array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
m_nsteps	StochasticVolumeRenderer.h	/^    size_t      m_nsteps;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
m_nsteps	StochasticVolumeRenderer.h	/^    size_t m_nsteps;$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
m_nsteps	StochasticVolumeRenderer.h	/^    size_t m_nsteps;$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
m_nvertices	StochasticPointRenderer.h	/^    size_t m_nvertices; \/\/\/< number of vertices$/;"	m	class:kvs::glew::StochasticPointRenderer::Particles	access:private
m_nvertices	StochasticVolumeRenderer.h	/^    size_t m_nvertices; \/\/\/< number of vertices$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
m_nvertices	StochasticVolumeRenderer.h	/^    size_t m_nvertices; \/\/\/< number of vertices$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
m_off_color	StochasticLineRenderer.h	/^    size_t  m_off_color;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
m_off_color	StochasticPointRenderer.h	/^    size_t  m_off_color; \/\/\/< offset bytes for the color value array$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
m_off_color	StochasticPolygonRenderer.h	/^    size_t  m_off_color;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
m_off_coord	StochasticLineRenderer.h	/^    size_t  m_off_coord;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
m_off_coord	StochasticPointRenderer.h	/^    size_t  m_off_coord; \/\/\/< offset bytes for the coodinate value array$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
m_off_coord	StochasticPolygonRenderer.h	/^    size_t  m_off_coord;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
m_off_coord	StochasticVolumeRenderer.h	/^    size_t m_off_coord; \/\/\/< offset bytes for the coodinate value array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
m_off_index	StochasticLineRenderer.h	/^    size_t  m_off_index;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
m_off_index	StochasticPointRenderer.h	/^    size_t  m_off_index; \/\/\/< offset bytes for the index array$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
m_off_index	StochasticPolygonRenderer.h	/^    size_t  m_off_index;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
m_off_index	StochasticVolumeRenderer.h	/^    size_t m_off_index; \/\/\/< offset bytes for the index array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
m_off_normal	StochasticPointRenderer.h	/^    size_t  m_off_normal; \/\/\/< offset bytes for the normal vector array$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
m_off_normal	StochasticPolygonRenderer.h	/^    size_t  m_off_normal;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
m_off_normal	StochasticVolumeRenderer.h	/^    size_t m_off_normal; \/\/\/< offset bytes for the normal array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
m_off_value	StochasticVolumeRenderer.h	/^    size_t m_off_value; \/\/\/< offset bytes for the value array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
m_parallel	CellTree.h	/^    bool								m_parallel;$/;"	m	class:kvs::CellTreeBuilder	access:private
m_particles	StochasticPointRenderer.h	/^    Particles*  m_particles;$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
m_particles	StochasticPointRenderer.h	/^    const StochasticPointRenderer::Particles*  m_particles; \/\/< pointer to the particles$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
m_pc	CellTree.h	/^    per_cell*                           m_pc;$/;"	m	class:kvs::CellTreeBuilder	access:private
m_pc	CellTree.h	/^    per_cell*                       m_pc;$/;"	m	class:kvs::SplitThread	access:private
m_pc1	CellTree.h	/^    per_cell*                           m_pc1;$/;"	m	class:kvs::CellTreeBuilder	access:private
m_pc2	CellTree.h	/^    per_cell*                           m_pc2;$/;"	m	class:kvs::CellTreeBuilder	access:private
m_point_size	StochasticPointRenderer.h	/^    float   m_point_size;$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
m_polygon_offset	StochasticPolygonRenderer.h	/^    float   m_polygon_offset;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
m_pos	CellTree.h	/^        const float*			m_pos;$/;"	m	struct:kvs::CellTree::in_traversal_cached	access:public
m_pos	CellTree.h	/^        const float*			m_pos;$/;"	m	struct:kvs::CellTree::pre_traversal	access:public
m_pos	CellTree.h	/^        const float*			m_pos;$/;"	m	struct:kvs::CellTree::pre_traversal_cached	access:public
m_random_texture	StochasticRenderer.h	/^    kvs::Texture2D  m_random_texture;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_random_texture	StochasticRendererBase.h	/^    kvs::Texture2D  m_random_texture;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
m_random_texture_size	StochasticRenderer.h	/^    size_t          m_random_texture_size;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_ref_line	StochasticLineRenderer.h	/^    kvs::LineObject* m_ref_line;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
m_ref_particle	StochasticPointRenderer.h	/^    kvs::PointObject*   m_ref_particle;$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
m_ref_polygon	StochasticPolygonRenderer.h	/^    kvs::PolygonObject* m_ref_polygon;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
m_ref_volume	StochasticVolumeRenderer.h	/^    kvs::UnstructuredVolumeObject*  m_ref_volume;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
m_renderer	StochasticPointRenderer.h	/^    Renderer*   m_renderer;$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
m_renderer	StochasticVolumeRenderer.h	/^    Renderer*   m_renderer;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
m_renderer_list	StochasticRenderer.h	/^    RendererList    m_renderer_list;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_repeat_count	StochasticRendererBase.h	/^    size_t      m_repeat_count;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
m_repeat_level	StochasticRenderer.h	/^    size_t      m_repeat_level;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_repeat_level	StochasticRendererBase.h	/^    size_t      m_repeat_level;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
m_shader	StochasticRendererBase.h	/^    kvs::Shader::shader_type*   m_shader;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
m_shader_program	StochasticRendererBase.h	/^    kvs::glew::ProgramObject    m_shader_program;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
m_size_depth	PreIntegrationTable.h	/^    int                  m_size_depth;    \/\/\/< table size for the depth axis$/;"	m	class:kvs::glew::PreIntegrationTable	access:protected
m_size_scalar	PreIntegrationTable.h	/^    int                  m_size_scalar;   \/\/\/< table size for the scalar axis$/;"	m	class:kvs::glew::PreIntegrationTable	access:protected
m_sp	CellTree.h	/^        unsigned int*			m_sp;$/;"	m	struct:kvs::CellTree::in_traversal_cached	access:public
m_sp	CellTree.h	/^        unsigned int*			m_sp;$/;"	m	struct:kvs::CellTree::pre_traversal	access:public
m_sp	CellTree.h	/^        unsigned int*			m_sp;$/;"	m	struct:kvs::CellTree::pre_traversal_cached	access:public
m_stack	CellTree.h	/^        unsigned int			m_stack[32];$/;"	m	struct:kvs::CellTree::in_traversal_cached	access:public
m_stack	CellTree.h	/^        unsigned int			m_stack[32];$/;"	m	struct:kvs::CellTree::pre_traversal	access:public
m_stack	CellTree.h	/^        unsigned int            m_stack[32];$/;"	m	struct:kvs::CellTree::pre_traversal_cached	access:public
m_start	StochasticPointRenderer.h	/^    size_t  m_start; \/\/\/< start number of input vertices$/;"	m	class:kvs::glew::StochasticPointRenderer::Renderer	access:private
m_step	StochasticVolumeRenderer.h	/^    size_t      m_step;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
m_table	PreIntegrationTable.h	/^    kvs::Vector4f*       m_table;         \/\/\/< pre-integration table$/;"	m	class:kvs::glew::PreIntegrationTable	access:protected
m_table	StochasticVolumeRenderer.h	/^    kvs::glew::PreIntegrationTable m_table;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
m_table_texture	PreIntegrationTable.h	/^    kvs::glew::Texture3D m_table_texture; \/\/\/< pre-integration table texture$/;"	m	class:kvs::glew::PreIntegrationTable	access:protected
m_tfunc	StochasticVolumeRenderer.h	/^    kvs::TransferFunction           m_tfunc;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
m_thread	CellTree.h	/^	kvs::SplitThread					m_thread[2];$/;"	m	class:kvs::CellTreeBuilder	access:private
m_transfer_function	PreIntegrationTable.h	/^    kvs::Vector4f*       m_transfer_function; \/\/\/< transfer function data$/;"	m	class:kvs::glew::PreIntegrationTable	access:protected
m_update_flag	StochasticRendererBase.h	/^    bool        m_update_flag;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
m_values	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::ValueType* m_values; \/\/\/< color value array$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Volume	access:private
m_vbo	StochasticLineRenderer.h	/^    kvs::glew::VertexBufferObject   m_vbo;$/;"	m	class:kvs::glew::StochasticLineRenderer	access:protected
m_vbo	StochasticPointRenderer.h	/^    kvs::glew::VertexBufferObject* m_vbo; \/\/\/< vertex buffer object (VBO) for the volume$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
m_vbo	StochasticPolygonRenderer.h	/^    kvs::glew::VertexBufferObject   m_vbo;$/;"	m	class:kvs::glew::StochasticPolygonRenderer	access:protected
m_vbo	StochasticVolumeRenderer.h	/^    kvs::glew::VertexBufferObject   m_vbo;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
m_volume	StochasticVolumeRenderer.h	/^    Volume*     m_volume;$/;"	m	class:kvs::glew::StochasticVolumeRenderer	access:protected
m_volume	StochasticVolumeRenderer.h	/^    const StochasticVolumeRenderer::Volume* m_volume; \/\/< pointer to the volume$/;"	m	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:private
m_width	StochasticRenderer.h	/^    size_t      m_width;$/;"	m	class:kvs::glew::StochasticRenderer	access:protected
m_width	StochasticRendererBase.h	/^    size_t      m_width;$/;"	m	class:kvs::glew::StochasticRendererBase	access:protected
m_zooming_factor	StochasticPointRenderer.h	/^    float   m_zooming_factor; \/\/\/< zooming factor$/;"	m	class:kvs::glew::StochasticPointRenderer	access:protected
main	main.cpp	/^int main(int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
make_leaf	CellTree.cpp	/^        root1.make_leaf( start1, size1 );	\/\/set index = 3 start = 0 size = ncells$/;"	p	file:	signature:( start1, size1 )
make_leaf	CellTree.cpp	/^        root2.make_leaf( start2, size2 );	\/\/set index = 3 start = 0 size = ncells$/;"	p	file:	signature:( start2, size2 )
make_leaf	CellTree.h	/^        void make_leaf( unsigned int start, unsigned int size )$/;"	f	struct:kvs::CellTree::node	access:public	signature:( unsigned int start, unsigned int size )
make_node	CellTree.cpp	/^    m_nodes[index].make_node( m_nodes.size(), dim, clip );$/;"	p	file:	signature:( m_nodes.size(), dim, clip )
make_node	CellTree.cpp	/^    nodes[index].make_node( nodes.size(), dim, clip );$/;"	p	file:	signature:( nodes.size(), dim, clip )
make_node	CellTree.h	/^        void make_node( unsigned int left, unsigned int d, float b[2] )$/;"	f	struct:kvs::CellTree::node	access:public	signature:( unsigned int left, unsigned int d, float b[2] )
mask	CellTree.cpp	/^        kvs::BitArray mask;$/;"	l
max	CellTree.cpp	/^    float max[3] = { $/;"	l
max	CellTree.h	/^        float        max;$/;"	m	struct:__anon1::bucket	access:public
max	CellTree.h	/^        float        max[3];$/;"	m	struct:__anon1::per_cell	access:public
mid	CellTree.cpp	/^        per_cell* mid   = begin;$/;"	l
mid	CellTree.cpp	/^    per_cell* mid   = begin;$/;"	l
min	CellTree.cpp	/^    float min[3] = { $/;"	l
min	CellTree.h	/^        float        min;$/;"	m	struct:__anon1::bucket	access:public
min	CellTree.h	/^        float        min[3];$/;"	m	struct:__anon1::per_cell	access:public
mode	CellLocator.h	/^    const CellLocator::Mode mode() const { return m_mode; } $/;"	f	class:kvs::CellLocator	access:public	signature:() const
n	CellLocatorBIH.cpp	/^                    int n = sp1-stack1;$/;"	l
n	CellTree.h	/^                const CellTree::node* n = &m_ct.nodes.front() + *(--m_sp);$/;"	l
n	CellTree.h	/^            int n = hint_sp - hint_stack;     \/\/ initialize stack pointer $/;"	l
nbuckets	CellTree.cpp	/^        const unsigned int nbuckets = 6;$/;"	l
nbuckets	CellTree.cpp	/^    const unsigned int nbuckets  = 6;$/;"	l
nbuckets	CellTree.cpp	/^    const unsigned int nbuckets = 6;$/;"	l
ncells	CellTree.cpp	/^    const size_t ncells  = ds->ncells();$/;"	l
ncells	StochasticVolumeRenderer.h	/^    const size_t ncells( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
next	CellTree.h	/^        const CellTree::node* next()$/;"	f	struct:kvs::CellTree::in_traversal_cached	access:public	signature:()
next	CellTree.h	/^        const CellTree::node* next()$/;"	f	struct:kvs::CellTree::pre_traversal	access:public	signature:()
next	CellTree.h	/^        const CellTree::node* next()$/;"	f	struct:kvs::CellTree::pre_traversal_cached	access:public	signature:()
ni	CellTree.cpp	/^        std::vector<CellTree::node>::iterator ni = ct.nodes.begin()+1;  $/;"	l
ni	CellTree.cpp	/^        std::vector<CellTree::node>::iterator ni = ct.nodes.begin();$/;"	l
nleaves	CellLocatorBIH.cpp	/^    const unsigned int nleaves = m_celltree->leaves.size();$/;"	l
nleaves	CellLocatorBIH.cpp	/^    infile >> nleaves;$/;"	l
nleaves	CellLocatorBIH.cpp	/^    outfile << nleaves;$/;"	l
nleaves	CellLocatorBIH.cpp	/^    unsigned int nleaves;$/;"	l
nn	CellTree.cpp	/^        std::vector<CellTree::node>::iterator nn = ct.nodes.begin()+1;$/;"	l
nn	CellTree.cpp	/^        std::vector<CellTree::node>::iterator nn = ct.nodes.begin()+3;$/;"	l
nnodes	CellLocator.cpp	/^    int nnodes = m_dataset->cellType();$/;"	l
nnodes	CellLocatorBIH.cpp	/^    const unsigned int nnodes = m_celltree->nodes.size();$/;"	l
nnodes	CellLocatorBIH.cpp	/^    infile >> nnodes;$/;"	l
nnodes	CellLocatorBIH.cpp	/^    outfile << nnodes;$/;"	l
nnodes	CellLocatorBIH.cpp	/^    unsigned int nnodes;$/;"	l
node	CellLocatorBIH.cpp	/^        kvs::CellTree::node node;$/;"	l
node	CellTree.h	/^    struct node$/;"	s	class:kvs::CellTree	access:public
node_size	CellTree.cpp	/^        const unsigned int node_size = m_nodes1.size() + m_nodes2.size() + 1;$/;"	l
nodes	CellTree.cpp	/^    std::vector<CellTree::node>& nodes = *m_nodes;$/;"	l
nodes	CellTree.h	/^    std::vector<node>         nodes;$/;"	m	class:kvs::CellTree	access:public
normals	StochasticPointRenderer.h	/^    StochasticPointRenderer::NormalType* normals( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
normals	StochasticPointRenderer.h	/^    const StochasticPointRenderer::NormalType* normals( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
normals	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::NormalType* normals( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
normals	StochasticVolumeRenderer.h	/^    const StochasticVolumeRenderer::NormalType* normals( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
nth_element	CellTree.cpp	/^            std::nth_element( begin, mid, end, center_order( dim ) );$/;"	p	class:kvs::std	file:	signature:( begin, mid, end, center_order( dim ) )
nth_element	CellTree.cpp	/^        std::nth_element( begin, mid, end, center_order( dim ) );$/;"	p	class:kvs::std	file:	signature:( begin, mid, end, center_order( dim ) )
nvertices	StochasticPointRenderer.h	/^    const size_t nvertices( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void ) const
nvertices	StochasticVolumeRenderer.h	/^    const size_t nvertices( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
object	StochasticLineRenderer.h	/^    kvs::ObjectBase* object( void ) const;$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void ) const
object	StochasticPointRenderer.h	/^    kvs::ObjectBase* object( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void ) const
object	StochasticPolygonRenderer.h	/^    kvs::ObjectBase* object( void ) const;$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void ) const
object	StochasticRendererBase.h	/^    virtual kvs::ObjectBase* object( void ) const = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void ) const
object	StochasticVolumeRenderer.h	/^    kvs::ObjectBase* object( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void ) const
objectType	NullObject.h	/^    const ObjectType objectType( void ) const;$/;"	p	class:kvs::NullObject	access:public	signature:( void ) const
operator ()	CellTree.h	/^        bool operator()( const per_cell& pc )$/;"	f	struct:__anon1::left_predicate	access:public	signature:( const per_cell& pc )
operator ()	CellTree.h	/^        bool operator()( const per_cell& pc0, const per_cell& pc1 )$/;"	f	struct:__anon1::center_order	access:public	signature:( const per_cell& pc0, const per_cell& pc1 )
outfile	CellLocatorBIH.cpp	/^    std::ofstream outfile( filename, std::ios_base::out|std::ios_base::binary );$/;"	p	file:	signature:( filename, std::ios_base::out|std::ios_base::binary )
p	CellTree.h	/^                const float p = m_pos[n->dim()];        \/\/ the value corresponding to split dim of the node$/;"	l
p	CellTree.h	/^        float              p;$/;"	m	struct:__anon1::left_predicate	access:public
per_cell	CellTree.h	/^    struct per_cell $/;"	s	namespace:__anon1
plane	CellTree.cpp	/^        float plane;$/;"	l
plane	CellTree.cpp	/^    float plane;$/;"	l
pre_traversal	CellTree.h	/^        pre_traversal( const CellTree& ct, const float* pos ) :$/;"	f	struct:kvs::CellTree::pre_traversal	access:public	signature:( const CellTree& ct, const float* pos )
pre_traversal	CellTree.h	/^    struct pre_traversal$/;"	s	class:kvs::CellTree	access:public
pre_traversal_cached	CellTree.h	/^        pre_traversal_cached( const CellTree& ct, const float* pos, const unsigned int previous_index ) :$/;"	f	struct:kvs::CellTree::pre_traversal_cached	access:public	signature:( const CellTree& ct, const float* pos, const unsigned int previous_index )
pre_traversal_cached	CellTree.h	/^    struct pre_traversal_cached$/;"	s	class:kvs::CellTree	access:public
printVertices	CellLocator.cpp	/^void CellLocator::printVertices() const$/;"	f	class:kvs::CellLocator	signature:() const
printVertices	CellLocator.h	/^    void printVertices() const;$/;"	p	class:kvs::CellLocator	access:public	signature:() const
push_back	CellTree.cpp	/^        m_nodes.push_back( root );		$/;"	p	file:	signature:( root )
push_back	CellTree.cpp	/^        m_nodes1.push_back( root1 );$/;"	p	file:	signature:( root1 )
push_back	CellTree.cpp	/^        m_nodes2.push_back( root2 );$/;"	p	file:	signature:( root2 )
r	CellTree.h	/^                bool r = p > n->rmin();$/;"	l
randomCellindex	CellLocator.cpp	/^size_t CellLocator::randomCellindex() const$/;"	f	class:kvs::CellLocator	signature:() const
randomCellindex	CellLocator.h	/^    size_t randomCellindex() const;$/;"	p	class:kvs::CellLocator	access:public	signature:() const
read	CellLocator.h	/^    virtual bool read( const std::string filename ) = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:( const std::string filename )
read	CellLocatorBIH.cpp	/^bool CellLocatorBIH::read( const std::string filename )$/;"	f	class:kvs::CellLocatorBIH	signature:( const std::string filename )
read	CellLocatorBIH.h	/^    bool read( const std::string filename );$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( const std::string filename )
registerRenderer	StochasticRenderer.h	/^    void registerRenderer( kvs::glew::StochasticRendererBase* renderer );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( kvs::glew::StochasticRendererBase* renderer )
release	PreIntegrationTable.h	/^    void release( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
release	StochasticPointRenderer.h	/^    void release( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
release	StochasticVolumeRenderer.h	/^    void release( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
rendererType	StochasticLineRenderer.h	/^    const RendererType rendererType( void ) const;$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void ) const
rendererType	StochasticPointRenderer.h	/^    const RendererType rendererType( void ) const;$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void ) const
rendererType	StochasticPolygonRenderer.h	/^    const RendererType rendererType( void ) const;$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void ) const
rendererType	StochasticRendererBase.h	/^    virtual const RendererType rendererType( void ) const = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void ) const
rendererType	StochasticVolumeRenderer.h	/^    const RendererType rendererType( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void ) const
resize	CellLocatorBIH.cpp	/^    ct->leaves.resize( nleaves );$/;"	p	file:	signature:( nleaves )
resize	CellLocatorBIH.cpp	/^    ct->nodes.resize( nnodes );$/;"	p	file:	signature:( nnodes )
resize	CellTree.cpp	/^        ct.leaves.resize( ncells );$/;"	p	file:	signature:( ncells )
resize	CellTree.cpp	/^        ct.nodes.resize( m_nodes.size() );$/;"	p	file:	signature:( m_nodes.size() )
resize	CellTree.cpp	/^        ct.nodes.resize( node_size );$/;"	p	file:	signature:( node_size )
right	CellTree.h	/^        unsigned int right() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
rm	CellLocatorBIH.cpp	/^        float lm,rm;$/;"	l
rm	CellLocatorBIH.cpp	/^        infile >> index >> lm >> rm;$/;"	l
rm	CellTree.h	/^                float rm;$/;"	m	struct:kvs::CellTree::node::__anon2::__anon3	access:public
rmax	CellTree.cpp	/^        float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
rmax	CellTree.cpp	/^    float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
rmin	CellTree.cpp	/^                float rmin =  std::numeric_limits<float>::max();$/;"	l
rmin	CellTree.cpp	/^            float rmin =  std::numeric_limits<float>::max();$/;"	l
rmin	CellTree.cpp	/^        float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
rmin	CellTree.cpp	/^    float lmin[3], lmax[3], rmin[3], rmax[3];$/;"	l
rmin	CellTree.h	/^        const float& rmin() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
root	CellTree.cpp	/^        CellTree::node root;$/;"	l
root1	CellTree.cpp	/^        CellTree::node root1;$/;"	l
root2	CellTree.cpp	/^        CellTree::node root2;$/;"	l
run	CellTree.cpp	/^void SplitThread::run()$/;"	f	class:kvs::SplitThread	signature:()
run	CellTree.h	/^	void run();$/;"	p	class:kvs::SplitThread	access:public	signature:()
rvol	CellTree.cpp	/^                float rvol = (max[d]-rmin)\/ext[d];			\/\/right volume$/;"	l
rvol	CellTree.cpp	/^            float rvol = (max[d]-rmin)\/ext[d];			\/\/right volume$/;"	l
set	StochasticPointRenderer.h	/^    void set($/;"	p	class:kvs::glew::StochasticPointRenderer::Renderer	access:public	signature:( const StochasticPointRenderer::Particles* particles, const size_t start, const size_t count, const size_t loc_identifier )
set	StochasticVolumeRenderer.h	/^    void set($/;"	p	class:kvs::glew::StochasticVolumeRenderer::Renderer	access:public	signature:( const StochasticVolumeRenderer::Volume* volume, const size_t nsteps, const size_t nvertices, const size_t ncells, const size_t loc_identifier, const size_t loc_values )
setCellTree	CellLocatorBIH.cpp	/^void CellLocatorBIH::setCellTree( const kvs::CellTree* ct )$/;"	f	class:kvs::CellLocatorBIH	signature:( const kvs::CellTree* ct )
setCellTree	CellLocatorBIH.h	/^    void setCellTree( const kvs::CellTree* ct );$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( const kvs::CellTree* ct )
setDataSet	CellLocator.h	/^    void setDataSet( const kvs::UnstructuredVolumeObject* volume ){ m_dataset = volume; }$/;"	f	class:kvs::CellLocator	access:public	signature:( const kvs::UnstructuredVolumeObject* volume )
setEdgeSize	StochasticVolumeRenderer.h	/^    void setEdgeSize( const float edge_size );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( const float edge_size )
setGlobalPoint	CellLocator.cpp	/^    m_cell->setGlobalPoint( gpos );$/;"	p	file:	signature:( gpos )
setMode	CellLocator.h	/^    void setMode( const CellLocator::Mode mode ){ m_mode = mode; }$/;"	f	class:kvs::CellLocator	access:public	signature:( const CellLocator::Mode mode )
setNSteps	StochasticVolumeRenderer.h	/^    void setNSteps( const size_t nsteps );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( const size_t nsteps )
setOpacity	StochasticLineRenderer.h	/^    void setOpacity( const unsigned char opacity );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( const unsigned char opacity )
setParallel	CellLocatorBIH.cpp	/^	m_builder->setParallel();$/;"	p	file:	signature:()
setParallel	CellLocatorBIH.cpp	/^void CellLocatorBIH::setParallel()$/;"	f	class:kvs::CellLocatorBIH	signature:()
setParallel	CellLocatorBIH.h	/^	void setParallel();$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:()
setParallel	CellTree.cpp	/^void CellTreeBuilder::setParallel()$/;"	f	class:kvs::CellTreeBuilder	signature:()
setParallel	CellTree.h	/^	void setParallel();$/;"	p	class:kvs::CellTreeBuilder	access:public	signature:()
setParallel	main.cpp	/^	locator_d->setParallel();$/;"	p	file:	signature:()
setPointSize	StochasticPointRenderer.h	/^    void setPointSize( const float point_size );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( const float point_size )
setPolygonOffset	StochasticPolygonRenderer.h	/^    void setPolygonOffset( const float polygon_offset );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( const float polygon_offset )
setRandomTexture	StochasticRendererBase.h	/^    void setRandomTexture( const kvs::Texture2D& random_texture );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( const kvs::Texture2D& random_texture )
setRenderSize	StochasticRendererBase.h	/^    void setRenderSize( const size_t width, const size_t height );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( const size_t width, const size_t height )
setRepeatLevel	StochasticRenderer.h	/^    void setRepeatLevel( const size_t repeat_level );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( const size_t repeat_level )
setRepeatLevel	StochasticRendererBase.h	/^    void setRepeatLevel( const size_t repeat_level );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( const size_t repeat_level )
setShader	StochasticRendererBase.h	/^    void setShader( const ShadingType shader );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( const ShadingType shader )
setShader	StochasticRendererBase.h	/^inline void StochasticRendererBase::setShader( const ShadingType shader )$/;"	f	class:kvs::glew::StochasticRendererBase	signature:( const ShadingType shader )
setStep	StochasticVolumeRenderer.h	/^    void setStep( const size_t step );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( const size_t step )
setTableSize	PreIntegrationTable.h	/^    void setTableSize( const int size_scalar, const int size_depth );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( const int size_scalar, const int size_depth )
setTransferFunction	PreIntegrationTable.h	/^    void setTransferFunction($/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( const kvs::TransferFunction& transfer_function, const float min_scalar, const float max_scalar )
setTransferFunction	StochasticVolumeRenderer.h	/^    void setTransferFunction( const kvs::TransferFunction& tfunc );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( const kvs::TransferFunction& tfunc )
set_children	CellTree.h	/^        void set_children( unsigned int left )$/;"	f	struct:kvs::CellTree::node	access:public	signature:( unsigned int left )
setup_shader	StochasticLineRenderer.h	/^    void setup_shader( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:private	signature:( const float modelview_matrix[16] )
setup_shader	StochasticPointRenderer.h	/^    void setup_shader( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:private	signature:( const float modelview_matrix[16] )
setup_shader	StochasticPolygonRenderer.h	/^    void setup_shader( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:private	signature:( const float modelview_matrix[16] )
setup_shader	StochasticRendererBase.h	/^    virtual void setup_shader( const float modelview_matrix[16] ) = 0;$/;"	p	class:kvs::glew::StochasticRendererBase	access:protected	signature:( const float modelview_matrix[16] )
setup_shader	StochasticVolumeRenderer.h	/^    void setup_shader( const float modelview_matrix[16] );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:private	signature:( const float modelview_matrix[16] )
shallowCopy	NullObject.h	/^    void shallowCopy( const NullObject& object );$/;"	p	class:kvs::NullObject	access:public	signature:( const NullObject& object )
size	CellTree.cpp	/^        unsigned int size  = ncells;$/;"	l
size	CellTree.cpp	/^    unsigned int size  = m_nodes[index].size();$/;"	l
size	CellTree.cpp	/^    unsigned int size  = nodes[index].size();$/;"	l
size	CellTree.h	/^        unsigned int size() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
size1	CellTree.cpp	/^        unsigned int size1 = mid - m_pc;$/;"	l
size2	CellTree.cpp	/^        unsigned int size2 = end - mid;$/;"	l
sizeDepth	PreIntegrationTable.h	/^    const int sizeDepth( void ) const;$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void ) const
sp	CellLocatorBIH.cpp	/^                    const unsigned int* sp = pt.sp();$/;"	l
sp	CellTree.h	/^        const unsigned int* sp()$/;"	f	struct:kvs::CellTree::in_traversal_cached	access:public	signature:()
sp	CellTree.h	/^        const unsigned int* sp()$/;"	f	struct:kvs::CellTree::pre_traversal_cached	access:public	signature:()
sp1	CellLocatorBIH.cpp	/^                    const unsigned int* sp1 = pt.sp();$/;"	l
sp2	CellLocatorBIH.cpp	/^                    const unsigned int* sp2 = pt.lr_sp();$/;"	l
split	CellTree.cpp	/^void CellTreeBuilder::split( unsigned int index, float min[3], float max[3] )$/;"	f	class:kvs::CellTreeBuilder	signature:( unsigned int index, float min[3], float max[3] )
split	CellTree.cpp	/^void SplitThread::split( unsigned int index, float min[3], float max[3] )$/;"	f	class:kvs::SplitThread	signature:( unsigned int index, float min[3], float max[3] )
split	CellTree.h	/^	void split( unsigned int index, float min[3], float max[3] );$/;"	p	class:kvs::CellTreeBuilder	access:public	signature:( unsigned int index, float min[3], float max[3] )
split	CellTree.h	/^	void split( unsigned int index, float min[3], float max[3] );$/;"	p	class:kvs::SplitThread	access:public	signature:( unsigned int index, float min[3], float max[3] )
st	CellTree.h	/^                unsigned int st;$/;"	m	struct:kvs::CellTree::node::__anon2::__anon4	access:public
stack	CellTree.h	/^        const unsigned int* stack()$/;"	f	struct:kvs::CellTree::in_traversal_cached	access:public	signature:()
stack	CellTree.h	/^        const unsigned int* stack()$/;"	f	struct:kvs::CellTree::pre_traversal_cached	access:public	signature:()
stack1	CellLocatorBIH.cpp	/^                    const unsigned int* stack1 = pt.stack();$/;"	l
stack2	CellLocatorBIH.cpp	/^                    const unsigned int* stack2 = pt.lr_stack();$/;"	l
start	CellLocatorBIH.cpp	/^    timer.start();$/;"	p	file:	signature:()
start	CellTree.cpp	/^	    m_thread[0].start();$/;"	p	file:	signature:()
start	CellTree.cpp	/^	    m_thread[1].start();$/;"	p	file:	signature:()
start	CellTree.cpp	/^        unsigned int start = 0;$/;"	l
start	CellTree.cpp	/^    unsigned int start = m_nodes[index].start();$/;"	l
start	CellTree.cpp	/^    unsigned int start = nodes[index].start();$/;"	l
start	CellTree.h	/^        unsigned int start() const$/;"	f	struct:kvs::CellTree::node	access:public	signature:() const
start1	CellTree.cpp	/^        unsigned int start1 = 0;$/;"	l
start2	CellTree.cpp	/^        unsigned int start2 = 0;$/;"	l
stop	CellLocatorBIH.cpp	/^    timer.stop();$/;"	p	file:	signature:()
sum	CellTree.cpp	/^            unsigned int sum = 0;$/;"	l
sum	CellTree.cpp	/^        unsigned int sum = 0;$/;"	l
sz	CellLocatorBIH.cpp	/^        infile >> sz;$/;"	l
sz	CellLocatorBIH.cpp	/^        unsigned int sz;$/;"	l
sz	CellTree.h	/^                unsigned int sz;$/;"	m	struct:kvs::CellTree::node::__anon2::__anon4	access:public
testCell	CellLocator.cpp	/^bool CellLocator::testCell( size_t cellid, const float pos[3] ) const$/;"	f	class:kvs::CellLocator	signature:( size_t cellid, const float pos[3] ) const
testCell	CellLocator.h	/^    bool testCell( size_t cellid, const float pos[3] ) const;$/;"	p	class:kvs::CellLocator	access:public	signature:( size_t cellid, const float pos[3] ) const
timer	CellLocatorBIH.cpp	/^    kvs::Timer timer;$/;"	l
transferFunction	StochasticVolumeRenderer.h	/^    const kvs::TransferFunction& transferFunction( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void ) const
transferFunction	StochasticVolumeRenderer.h	/^    kvs::TransferFunction& transferFunction( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
unbind	PreIntegrationTable.h	/^    void unbind( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
values	StochasticVolumeRenderer.h	/^    StochasticVolumeRenderer::ValueType* values( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
values	StochasticVolumeRenderer.h	/^    const StochasticVolumeRenderer::ValueType* values( void ) const;$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void ) const
volume	main.cpp	/^	kvs::UnstructuredVolumeObject* volume = new kvs::UnstructuredVolumeImporter(filename);$/;"	l
wait	CellTree.cpp	/^	    m_thread[0].wait();$/;"	p	file:	signature:()
wait	CellTree.cpp	/^	    m_thread[1].wait();$/;"	p	file:	signature:()
write	CellLocator.h	/^    virtual bool write( const std::string filename ) = 0;$/;"	p	class:kvs::CellLocator	access:public	signature:( const std::string filename )
write	CellLocatorBIH.cpp	/^bool CellLocatorBIH::write( const std::string filename )$/;"	f	class:kvs::CellLocatorBIH	signature:( const std::string filename )
write	CellLocatorBIH.h	/^    bool write( const std::string filename );$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:( const std::string filename )
x	CellLocator.cpp	/^        center.x() += m_cell->vertices()[i].x();$/;"	p	file:	signature:()
x	CellLocator.cpp	/^    center.x() \/= nnodes; $/;"	p	file:	signature:()
y	CellLocator.cpp	/^        center.y() += m_cell->vertices()[i].y();$/;"	p	file:	signature:()
y	CellLocator.cpp	/^    center.y() \/= nnodes; $/;"	p	file:	signature:()
z	CellLocator.cpp	/^        center.z() += m_cell->vertices()[i].z();$/;"	p	file:	signature:()
z	CellLocator.cpp	/^    center.z() \/= nnodes; $/;"	p	file:	signature:()
~BoundingBox	BoundingBox.h	/^        ~BoundingBox();$/;"	p	class:kvs::BoundingBox	access:public	signature:()
~CellLocator	CellLocator.cpp	/^CellLocator::~CellLocator()$/;"	f	class:kvs::CellLocator	signature:()
~CellLocator	CellLocator.h	/^    virtual ~CellLocator();$/;"	p	class:kvs::CellLocator	access:public	signature:()
~CellLocatorBIH	CellLocatorBIH.cpp	/^CellLocatorBIH::~CellLocatorBIH()$/;"	f	class:kvs::CellLocatorBIH	signature:()
~CellLocatorBIH	CellLocatorBIH.h	/^    ~CellLocatorBIH();$/;"	p	class:kvs::CellLocatorBIH	access:public	signature:()
~CellTree	CellTree.h	/^	~CellTree()$/;"	f	class:kvs::CellTree	access:public	signature:()
~CellTreeBuilder	CellTree.cpp	/^CellTreeBuilder::~CellTreeBuilder()$/;"	f	class:kvs::CellTreeBuilder	signature:()
~CellTreeBuilder	CellTree.h	/^	~CellTreeBuilder();$/;"	p	class:kvs::CellTreeBuilder	access:public	signature:()
~NullObject	NullObject.h	/^    virtual ~NullObject( void );$/;"	p	class:kvs::NullObject	access:public	signature:( void )
~Particles	StochasticPointRenderer.h	/^    ~Particles( void );$/;"	p	class:kvs::glew::StochasticPointRenderer::Particles	access:public	signature:( void )
~PolygonToPolygon	PolygonToPolygon.h	/^    virtual ~PolygonToPolygon( void );$/;"	p	class:kvs::PolygonToPolygon	access:public	signature:( void )
~PreIntegrationTable	PreIntegrationTable.h	/^    ~PreIntegrationTable( void );$/;"	p	class:kvs::glew::PreIntegrationTable	access:public	signature:( void )
~SplitThread	CellTree.h	/^	~SplitThread(){}$/;"	f	class:kvs::SplitThread	access:public	signature:()
~StochasticLineRenderer	StochasticLineRenderer.h	/^    virtual ~StochasticLineRenderer( void );$/;"	p	class:kvs::glew::StochasticLineRenderer	access:public	signature:( void )
~StochasticPointRenderer	StochasticPointRenderer.h	/^    virtual ~StochasticPointRenderer( void );$/;"	p	class:kvs::glew::StochasticPointRenderer	access:public	signature:( void )
~StochasticPolygonRenderer	StochasticPolygonRenderer.h	/^    virtual ~StochasticPolygonRenderer( void );$/;"	p	class:kvs::glew::StochasticPolygonRenderer	access:public	signature:( void )
~StochasticRenderer	StochasticRenderer.h	/^    virtual ~StochasticRenderer( void );$/;"	p	class:kvs::glew::StochasticRenderer	access:public	signature:( void )
~StochasticRendererBase	StochasticRendererBase.h	/^    virtual ~StochasticRendererBase( void );$/;"	p	class:kvs::glew::StochasticRendererBase	access:public	signature:( void )
~StochasticVolumeRenderer	StochasticVolumeRenderer.h	/^    virtual ~StochasticVolumeRenderer( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer	access:public	signature:( void )
~Volume	StochasticVolumeRenderer.h	/^    ~Volume( void );$/;"	p	class:kvs::glew::StochasticVolumeRenderer::Volume	access:public	signature:( void )
